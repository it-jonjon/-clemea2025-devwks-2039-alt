{
	"info": {
		"_postman_id": "60a32c3a-5be9-44c7-89be-e6b71bd4e3e1",
		"name": "DEVWKS-2039",
		"description": "## Automating Duo Operations for MSPs: Simplify, Streamline, & Scale Duo Deployments & Operations through the power of Duo APIs\n\n### Learning Objectives\n\nUpon completion of this lab, you will:\n\n- Gain clarity on Duo's core APIs, including the Accounts API and Admin API\n    \n- Gain an understanding of Postman and how’s it’s used to facilitate API interactions\n    \n- Learn to optimize Duo operations and scale Duo deployments using the user-friendly Postman platform\n    \n\n#### [CLICK HERE TO ACCESS LAB GUIDE](https://github.com/it-jonjon/clemea2025-devwks-2039/blob/main/README.md)\n\n##### Scenario\n\nIn today's fast-paced IT and security landscape, automation is essential for scalability. Managing Duo deployments and establishing efficient workflows for account creation, deployment, and management can quickly become complex.\n\nThis lab explores how APIs can streamline Duo administrative tasks and enhance scalability. Using Postman, you'll perform key Duo operations to reduce manual effort, minimize errors, and improve efficiency. By the end, you'll understand how to leverage Postman to simplify Duo account management and security workflows.\n\nIn this lab, we’ll explore the capabilities of Duo’s APIs by performing the following tasks using Postman:\n\n- **Create a New Duo User** – Quickly add a user to a Duo account.\n    \n- **Onboard a Duo Client Account** – Use the Duo Accounts API to create a new client account, configure settings, set up integrations, apply policies, and import user data.\n    \n- **Retrieve Bypass User Status** – Identify bypass users across multiple child accounts and update their status to active.\n    \n- **Enforce Policies** – Apply Duo policies across multiple accounts simultaneously.\n    \n- **Generate a Usage Report** – Pull cost reports for financial analysis.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27165404",
		"_collection_link": "https://duomsp.postman.co/workspace/Cisco-Live~01bc1c9f-f228-4fa7-98e5-c95e70e93740/collection/27165404-60a32c3a-5be9-44c7-89be-e6b71bd4e3e1?action=share&source=collection_link&creator=27165404"
	},
	"item": [
		{
			"name": "Duo Admin API",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Retrieve Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // Parse the JSON response",
											"// let responseData = pm.response.json();",
											"",
											"// // Function to capitalize the first letter of each word",
											"// function capitalizeFirstLetter(string) {",
											"//     return string.replace(/\\b\\w/g, char => char.toUpperCase());",
											"// }",
											"",
											"// // Check if the response contains a user",
											"// if (responseData.response && responseData.response.length > 0) {",
											"//     let user = responseData.response[0];",
											"    ",
											"//     // Check if username exists",
											"//     if (user.username) {",
											"//         // Capitalize the first letter of the first and last name",
											"//         let capitalizedUsername = capitalizeFirstLetter(user.username);",
											"",
											"//         // Log success message to the console",
											"//         console.log(`User ${capitalizedUsername} found successfully. User ID stored in the user_id collection variable. Proceed with next step.`);",
											"        ",
											"//         // Store the user_id as a collection variable",
											"//         pm.collectionVariables.set(\"user_id\", user.user_id);",
											"//     } else {",
											"//         console.log(\"Username not found in the response.\");",
											"//     }",
											"// } else {",
											"//     console.log(\"No user found in the response.\");",
											"// }",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "",
											"description": "Optional: Specify an email address to look up a single user.",
											"disabled": true
										},
										{
											"key": "username",
											"value": "",
											"description": "Optional: Specify a user name (or username alias) to look up a single user.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "",
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "",
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "***Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response",
											"let responseData = pm.response.json();",
											"",
											"// Ensure response contains the expected structure",
											"if (responseData.stat === \"OK\" && responseData.response && responseData.response.user_id) {",
											"    let username = responseData.response.username;",
											"    let userId = responseData.response.user_id;",
											"",
											"    // Store user_id in a Postman variable for future use",
											"    pm.collectionVariables.set(\"user_id\", userId);",
											"",
											"    // Log success message to console",
											"    console.log(`User created successfully: ${username}, ${userId}`);",
											"} else {",
											"    console.error(\"User creation failed or missing response data.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users?username=",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "",
											"description": "Required: The name of the user to create."
										},
										{
											"key": "aliases",
											"value": "",
											"description": "Optional: Username aliases for the user. Up to eight aliases may be specified with this parameter as a set of URL-encoded key-value pairs e.g. alias1=joe.smith&alias2=jsmith@example.com. Ignores alias position values not specified. Aliases must be unique amongst users. Mutually exclusive with alias1...4.",
											"disabled": true
										},
										{
											"key": "realname",
											"value": "",
											"description": "Optional: The real name (or full name) of this user.",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"description": "Optional: The email address of this user.",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Optional: he user’s status. One of:\n\n“active” - The user must complete secondary authentication. This is the default value if no status is specified.\n\n“bypass” - The user will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The user will not be able to complete secondary authentication.",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "",
											"description": "Optional: An optional description or notes field. Can be viewed in the Duo Admin Panel.",
											"disabled": true
										},
										{
											"key": "firstname",
											"value": "",
											"description": "Optional: The user's ginven name.",
											"disabled": true
										},
										{
											"key": "lastname",
											"value": "",
											"description": "Optional: The user's surname.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve User by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response",
											"let responseData = pm.response.json();",
											"",
											"// Function to capitalize the first letter of each word",
											"function capitalizeFirstLetter(string) {",
											"    return string.replace(/\\b\\w/g, char => char.toUpperCase());",
											"}",
											"",
											"// Check if the response contains the user object",
											"if (responseData.response) {",
											"    let user = responseData.response;",
											"    ",
											"    // Check if username and status exist",
											"    if (user.username && user.status) {",
											"        // Capitalize the first letter of the first and last name",
											"        let capitalizedUsername = capitalizeFirstLetter(user.username);",
											"",
											"        // Log the message to the console",
											"        console.log(`User ${capitalizedUsername} has been set to ${user.status} status.`);",
											"    } else {",
											"        console.log(\"Username or status not found in the response.\");",
											"    }",
											"} else {",
											"    console.log(\"No user found in the response.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/{{user_id}}?status=bypass",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "status",
											"value": "bypass",
											"description": "Optional: The new status. Must be one of “active”, “disabled”, or “bypass”. See Retrieve Users for an explanation of these fields."
										},
										{
											"key": "username",
											"value": "",
											"description": "Optional: The new username.",
											"disabled": true
										},
										{
											"key": "aliases",
											"value": "",
											"description": "Optional: Username aliases for the user. Up to eight aliases may be specified with this parameter as a set of URL-encoded key-value pairs e.g. alias1=joe.smith&alias2=jsmith@example.com. Ignores alias position values not specified. Remove the value for an existing alias by specifying a blank value e.g. alias1=. Aliases must be unique amongst users. Mutually exclusive with alias1...4.",
											"disabled": true
										},
										{
											"key": "realname",
											"value": "",
											"description": "Optional: The new real name (or full name).",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"description": "Optional: The new email address.",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "",
											"description": "Optional: The new notes field.",
											"disabled": true
										},
										{
											"key": "firstname",
											"value": "",
											"description": "Optional: The user's new given name.",
											"disabled": true
										},
										{
											"key": "lastname",
											"value": "",
											"description": "Optional: The user's new surname.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/enroll?username&email",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"enroll"
									],
									"query": [
										{
											"key": "username",
											"value": null,
											"description": "Required: The user name (or username alias) of the user to enroll."
										},
										{
											"key": "email",
											"value": null,
											"description": "Required: The email address of this user."
										},
										{
											"key": "valid_secs",
											"value": null,
											"description": "Optional: The number of seconds the enrollment code should be valid for. Default: 2592000 (30 days).",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "***Create Bypass Codes for User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response",
											"let responseData = pm.response.json();",
											"",
											"// Ensure response contains the expected structure",
											"if (responseData.stat === \"OK\" && responseData.response && Array.isArray(responseData.response)) {",
											"    let bypassCodes = responseData.response;",
											"",
											"    // Store bypass codes in a Postman variable for future use",
											"    pm.collectionVariables.set(\"bypass_codes\", JSON.stringify(bypassCodes));",
											"",
											"    // Format the bypass codes for logging",
											"    let formattedCodes = bypassCodes.join(\", \");",
											"",
											"    // Log success message to console",
											"    console.log(`Bypass codes created successfully for user: ${formattedCodes}`);",
											"} else {",
											"    console.error(\"Bypass code creation failed or missing response data.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/{{user_id}}/bypass_codes?count=&valid_secs=",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"bypass_codes"
									],
									"query": [
										{
											"key": "count",
											"value": "",
											"description": "Optional: Number of new bypass codes to create. At most 10 codes (the default) can be created at a time. Codes will be generated randomly."
										},
										{
											"key": "codes",
											"value": "",
											"description": "Optional: CSV string of codes to use. Mutually exclusive with count.",
											"disabled": true
										},
										{
											"key": "reuse_count",
											"value": "",
											"description": "Optional: The number of times generated bypass codes can be used. If 0, the codes will have an infinite reuse_count. Default: 1.",
											"disabled": true
										},
										{
											"key": "valid_secs",
											"value": "",
											"description": "Optional: The number of seconds generated bypass codes should be valid for. If 0 (the default) the codes will never expire."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Bypass Codes by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/bypass_codes",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"bypass_codes"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Groups by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"groups"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Group with User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups?group_id",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"groups"
									],
									"query": [
										{
											"key": "group_id",
											"value": null,
											"description": "Required: The ID of the group to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassociate Group from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups/[group_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"groups",
										"[group_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Phones by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"phones"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "***Associate Phone with User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response",
											"let responseData = pm.response.json();",
											"",
											"// Check if the response status is OK",
											"if (responseData.stat === \"OK\") {",
											"    console.log(\"Phone successfully assigned to user.\");",
											"} else {",
											"    console.error(\"❌ Failed to assign phone to user.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/{{user_id}}/phones?phone_id={{phone_id}}",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"phones"
									],
									"query": [
										{
											"key": "phone_id",
											"value": "{{phone_id}}",
											"description": "Required: The ID of the phone to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassociate Phone from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones[phone_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"phones[phone_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Hardware Tokens by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"tokens"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Hardware Token with User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens?token_id",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"tokens"
									],
									"query": [
										{
											"key": "token_id",
											"value": null,
											"description": "Required: The ID of the hardware token to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassocate Hardware Token from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens/[token_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"tokens",
										"[token_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve U2F Tokens by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/u2ftokens",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"u2ftokens"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve WebAuthn Credentials by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/webauthncredentials",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"webauthncredentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Synchronize User from Directory",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/directorysync/[directory_key]/syncuser?username",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"directorysync",
										"[directory_key]",
										"syncuser"
									],
									"query": [
										{
											"key": "username",
											"value": null,
											"description": "Required: The user to update via directory sync. This should be the same as the user's username in the source directory."
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#users"
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Per-user Group Operations",
							"item": [
								{
									"name": "Retrieve Groups by User ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"groups"
											],
											"query": [
												{
													"key": "limit",
													"value": null,
													"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Associate Group with User",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups?group_id",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"groups"
											],
											"query": [
												{
													"key": "group_id",
													"value": null,
													"description": "Required: The ID of the group to associate with the user."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Disassociate Group from User",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups/[group_id]",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"groups",
												"[group_id]"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Retrieve Groups",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/groups",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"groups"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Group",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/groups?name",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"groups"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Required: The name of the group."
										},
										{
											"key": "desc",
											"value": null,
											"description": "Optional: The description of the group.",
											"disabled": true
										},
										{
											"key": "status",
											"value": null,
											"description": "Optional: The authentication status of the group. May be one of:\n\n“active” - The users in the group must complete secondary authentication.\n\n“bypass” - The users in the group will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The users in the group will not be able to authenticate.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Group Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v2/groups/[group_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v2",
										"groups",
										"[group_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Group Members",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v2/groups/[group_id]/users",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v2",
										"groups",
										"[group_id]",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Group",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/groups/[group_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"groups",
										"[group_id]"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Optional: Update the name of the group.",
											"disabled": true
										},
										{
											"key": "desc",
											"value": null,
											"description": "Optional: Update the description of the group.",
											"disabled": true
										},
										{
											"key": "status",
											"value": null,
											"description": "Optional: The authentication status of the group. May be one of:\n\n“active” - The users in the group must complete secondary authentication.\n\n“bypass” - The users in the group will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The users in the group will not be able to authenticate.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/groups/[group_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"groups",
										"[group_id]"
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#groups"
				},
				{
					"name": "Phones",
					"item": [
						{
							"name": "Per-user Phone Operations",
							"item": [
								{
									"name": "Retrieve Phones by User ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"phones"
											],
											"query": [
												{
													"key": "limit",
													"value": null,
													"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Associate Phone with User",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones?phone_id",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"phones"
											],
											"query": [
												{
													"key": "phone_id",
													"value": null,
													"description": "Required: The ID of the phone to associate with the user."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Disassociate Phone from User",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones[phone_id]",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"phones[phone_id]"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Retrieve Phones",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones?number=",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones"
									],
									"query": [
										{
											"key": "extension",
											"value": "",
											"description": "Optional: The extension, if necessary.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "",
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "",
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										},
										{
											"key": "number",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response",
											"let responseData = pm.response.json();",
											"",
											"// Ensure response contains the expected structure",
											"if (responseData.stat === \"OK\" && responseData.response && responseData.response.phone_id) {",
											"    let phoneNumber = responseData.response.number;",
											"    let phoneId = responseData.response.phone_id;",
											"",
											"    // Store phone_id in a Postman variable for future use",
											"    pm.collectionVariables.set(\"phone_id\", phoneId);",
											"",
											"    // Log success message to console",
											"    console.log(`Phone created successfully: ${phoneNumber}, ${phoneId}`);",
											"} else {",
											"    console.error(\"Phone creation failed or missing response data.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones?number=",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones"
									],
									"query": [
										{
											"key": "number",
											"value": "",
											"description": "Optional: The phone number. A phone with a smartphone platform but no number is a tablet."
										},
										{
											"key": "name",
											"value": "",
											"description": "Optional: Free-form label for the phone.",
											"disabled": true
										},
										{
											"key": "extension",
											"value": "",
											"description": "Optional: The extension.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "",
											"description": "Optional: The type of phone. One of: “unknown”, “mobile”, or “landline”.",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "",
											"description": "Optional: The phone platform. One of: “unknown”, “google android”, “apple ios”, “windows phone 7”, “rim blackberry”, “java j2me”, “palm webos”, “symbian os”, “windows mobile”, or “generic smartphone”.\n\n“windows phone” is accepted as a synonym for “windows phone 7”. This includes devices running Windows Phone 8.\n\nIf a smartphone’s exact platform is unknown but it will have Duo Mobile installed, use “generic smartphone” and generate an activation code. When the phone is activated its platform will be automatically detected.",
											"disabled": true
										},
										{
											"key": "predelay",
											"value": "",
											"description": "Optional: The time (in seconds) to wait after the number picks up and before dialing the extension.",
											"disabled": true
										},
										{
											"key": "postdelay",
											"value": "",
											"description": "Optional: The time (in seconds) to wait after the extension is dialed and before the speaking the prompt.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Phone by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones",
										"[phone_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify Phone",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}/admin/v1/phones/[phone_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}"
									],
									"path": [
										"admin",
										"v1",
										"phones",
										"[phone_id]"
									],
									"query": [
										{
											"key": "number",
											"value": null,
											"description": "Optional: The new number.",
											"disabled": true
										},
										{
											"key": "name",
											"value": null,
											"description": "Optional: Free-form label for the phone.",
											"disabled": true
										},
										{
											"key": "extension",
											"value": null,
											"description": "Optional: The new extension.",
											"disabled": true
										},
										{
											"key": "type",
											"value": null,
											"description": "Optional: The type of phone. One of: “unknown”, “mobile”, or “landline”.",
											"disabled": true
										},
										{
											"key": "platform",
											"value": null,
											"description": "Optional: The phone platform. One of: “unknown”, “google android”, “apple ios”, “windows phone 7”, “rim blackberry”, “java j2me”, “palm webos”, “symbian os”, “windows mobile”, or “generic smartphone”.\n“windows phone” is accepted as a synonym for “windows phone 7”. This includes devices running Windows Phone 8.\nIf a smartphone’s exact platform is unknown but it will have Duo Mobile installed, use “generic smartphone” and generate an activation code. When the phone is activated its platform will be automatically detected.",
											"disabled": true
										},
										{
											"key": "predelay",
											"value": null,
											"description": "Optional: The time (in seconds) to wait after the number picks up and before dialing the extension.",
											"disabled": true
										},
										{
											"key": "postdelay",
											"value": null,
											"description": "Optional: The time (in seconds) to wait after the extension is dialed and before the speaking the prompt.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Phone",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones[phone_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones[phone_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Activation Code",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones[phone_id]/activation_url",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones[phone_id]",
										"activation_url"
									],
									"query": [
										{
											"key": "valid_secs",
											"value": null,
											"description": "Optional: The number of seconds this activation code should be valid for. Default: 86400 (one day).",
											"disabled": true
										},
										{
											"key": "install",
											"value": null,
											"description": "Optional: “1” to also return an installation URL for Duo Mobile; “0” to not return. Default: “0”.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Activation Code via SMS",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]/send_sms_activation",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones",
										"[phone_id]",
										"send_sms_activation"
									],
									"query": [
										{
											"key": "valid_secs",
											"value": null,
											"description": "Optional: The number of seconds this activation code should be valid for. Default: 86400 (one day).",
											"disabled": true
										},
										{
											"key": "install",
											"value": null,
											"description": "Optional: “1” to cause an installation SMS message to be sent before the activation message, “0” to not send an installation SMS message. Default: “0”.",
											"disabled": true
										},
										{
											"key": "installation_msg",
											"value": null,
											"description": "Optional: A custom installation message to send to the user. Only valid if installation was requested. Must contain the phrase “<insturl>”, which is replaced with the installation URL.",
											"disabled": true
										},
										{
											"key": "activation_msg",
											"value": null,
											"description": "Optional: A custom activation message to send to the user. Must contain “<acturl>”, which is replaced with the activation URL.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Installation URL via SMS",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]/send_sms_installation",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones",
										"[phone_id]",
										"send_sms_installation"
									],
									"query": [
										{
											"key": "installation_msg",
											"value": null,
											"description": "Optional: A custom installation message to send to the user. Must contain the phrase “<insturl>”, which is replaced with the installation URL.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Passcodes via SMS",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]/send_sms_passcodes",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"phones",
										"[phone_id]",
										"send_sms_passcodes"
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#phones"
				},
				{
					"name": "Policy",
					"item": [
						{
							"name": "/admin/v2/policies",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v2/policies",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v2",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/admin/v2/policies (Add New)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"New Policy Name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v2/policies",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v2",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/admin/v2/policies (Update)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"policy_name\": \"Bypass MFA\",\n   \"sections\": {   },\n   \"sections_to_delete\": [  ],\n   \"apply_to_apps\": {\n      \"affect_all_apps\": \"inactive\",\n      \"apply_list\": [\"DI06MHQ6572FIAZ9ANGT\"]\n   },\n   \"apply_to_groups_in_apps\": {\n      \"group_policy_apply_order\": \"existing\",\n      \"apply_group_policies_list\": [\n         {\n            \"app_integration_key\": \"DI06MHQ6572FIAZ9ANGT\",\n            \"group_id_list\": [\"DG2CROWCSQGVDM8RCJX4\"]\n         }\n      ]\n   }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v2/policies/PO4P3HWGHQEE0M5FQJ4F",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v2",
										"policies",
										"PO4P3HWGHQEE0M5FQJ4F"
									]
								}
							},
							"response": []
						},
						{
							"name": "/admin/v2/policies (Delete)",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v2/policies/POFJO98WFAVBYLYW26BK",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v2",
										"policies",
										"POFJO98WFAVBYLYW26BK"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tokens",
					"item": [
						{
							"name": "Per-user Token Operations",
							"item": [
								{
									"name": "Retrieve Hardware Tokens by User ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"tokens"
											],
											"query": [
												{
													"key": "limit",
													"value": null,
													"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Associate Hardware Token with User",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens?token_id",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"tokens"
											],
											"query": [
												{
													"key": "token_id",
													"value": null,
													"description": "Required: The ID of the hardware token to associate with the user."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Disassocate Hardware Token from User",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens/[token_id]",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"tokens",
												"[token_id]"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Per-administrator Token Operations",
							"item": [
								{
									"name": "Retrieve Administrator by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"admins",
												"[admin_id]"
											]
										},
										"description": "https://duo.com/docs/adminapi#retrieve-administrator-by-id"
									},
									"response": []
								},
								{
									"name": "Create Administrators",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/admins?email&name",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"admins"
											],
											"query": [
												{
													"key": "email",
													"value": null,
													"description": "Required"
												},
												{
													"key": "name",
													"value": null,
													"description": "Required"
												},
												{
													"key": "phone",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "role",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "restricted_by_admin_units",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "send_email",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "token_id",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "valid_days",
													"value": null,
													"description": "Optional",
													"disabled": true
												}
											]
										},
										"description": "https://duo.com/docs/adminapi#create-administrator"
									},
									"response": []
								},
								{
									"name": "Modify Administrator",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"admins",
												"[admin_id]"
											],
											"query": [
												{
													"key": "name",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "phone",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "password_change_required",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "role",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "restricted_by_admin_units",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "status",
													"value": null,
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "token_id",
													"value": null,
													"description": "Optional",
													"disabled": true
												}
											]
										},
										"description": "https://duo.com/docs/adminapi#modify-administrator"
									},
									"response": []
								}
							]
						},
						{
							"name": "Retrieve Hardware Tokens",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/tokens",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"tokens"
									],
									"query": [
										{
											"key": "type",
											"value": null,
											"description": "Optional: Specify a type and serial number to look up a single hardware token. One of:\n\n“h6” - HOTP-6 hardware token\n“h8” - HOTP-8 hardware token\n“yk” - YubiKey AES hardware token\n“d1” - Duo-D100 hardware token\nf\n* This option is required if serial is present.",
											"disabled": true
										},
										{
											"key": "serial",
											"value": null,
											"description": "Optional: The serial number of the hardware token.\n\n* This option is required if type is present.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hardware Token",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/tokens?type&serial",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"tokens"
									],
									"query": [
										{
											"key": "type",
											"value": null,
											"description": "Required: The type of hardware token to import. One of:\n\n“h6” - HOTP-6 hardware token\n“h8” - HOTP-8 hardware token\n“yk” - YubiKey AES hardware token\n\nDuo-D100 tokens (type \"d1\") are imported when purchased from Duo and may not be created via the Admin API."
										},
										{
											"key": "serial",
											"value": null,
											"description": "Required: The serial number of the token (maximum length 128 characters)."
										},
										{
											"key": "secret",
											"value": null,
											"description": "Optional: The HOTP secret. This parameter is required for HOTP-6 and HOTP-8 hardware tokens.",
											"disabled": true
										},
										{
											"key": "counter",
											"value": null,
											"description": "Optional: Initial value for the HOTP counter. Default: 0. This parameter is only valid for HOTP-6 and HOTP-8 hardware tokens.",
											"disabled": true
										},
										{
											"key": "private_id",
											"value": null,
											"description": "Optional: The YubiKey private ID. This parameter is required for YubiKey hardware tokens.",
											"disabled": true
										},
										{
											"key": "aes_key",
											"value": null,
											"description": "Optional: The YubiKey AES key. This parameter is required for YubiKey hardware tokens.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Hardware Token by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/tokens/[token_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"tokens",
										"[token_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resync Hardware Token",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/tokens/[token_id]/resync?code1&code2&code3",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"tokens",
										"[token_id]",
										"resync"
									],
									"query": [
										{
											"key": "code1",
											"value": null,
											"description": "Required: The first code from the token."
										},
										{
											"key": "code2",
											"value": null,
											"description": "Required: The second code from the token."
										},
										{
											"key": "code3",
											"value": null,
											"description": "Required: The third code from the token."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Hardware Token",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/tokens/[token_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"tokens",
										"[token_id]"
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#tokens"
				},
				{
					"name": "U2F Tokens",
					"item": [
						{
							"name": "Per-user U2F Token Operations",
							"item": [
								{
									"name": "Retrieve U2F Tokens by User ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/u2ftokens",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"u2ftokens"
											],
											"query": [
												{
													"key": "limit",
													"value": null,
													"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Retrieve U2F Tokens",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/u2ftokens",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"u2ftokens"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve U2F Token by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/u2ftokens/[registration_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"u2ftokens",
										"[registration_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete U2F Token",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/u2ftokens/[registration_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"u2ftokens",
										"[registration_id]"
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#u2f-tokens"
				},
				{
					"name": "WebAuthn Credentials",
					"item": [
						{
							"name": "Per-user WebAuthn Credential Operations",
							"item": [
								{
									"name": "Retrieve WebAuthn Credentials by User ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/webauthncredentials",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"webauthncredentials"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Retrieve WebAuthn Credentials",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/webauthncredentials",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"webauthncredentials"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve WebAuthn Credentials by Key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/webauthncredentials/[webauthnkey]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"webauthncredentials",
										"[webauthnkey]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete WebAuthn Credential",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/webauthncredentials/[webauthnkey]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"webauthncredentials",
										"[webauthnkey]"
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#webauthn-credentials"
				},
				{
					"name": "Bypass Codes",
					"item": [
						{
							"name": "Per-user Bypass Code Operations",
							"item": [
								{
									"name": "Create Bypass Codes for User",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/bypass_codes",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"bypass_codes"
											],
											"query": [
												{
													"key": "count",
													"value": null,
													"description": "Optional: Number of new bypass codes to create. At most 10 codes (the default) can be created at a time. Codes will be generated randomly.",
													"disabled": true
												},
												{
													"key": "codes",
													"value": null,
													"description": "Optional: CSV string of codes to use. Mutually exclusive with count.",
													"disabled": true
												},
												{
													"key": "reuse_count",
													"value": null,
													"description": "Optional: The number of times generated bypass codes can be used. If 0, the codes will have an infinite reuse_count. Default: 1.",
													"disabled": true
												},
												{
													"key": "valid_secs",
													"value": null,
													"description": "Optional: The number of seconds generated bypass codes should be valid for. If 0 (the default) the codes will never expire.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve Bypass Codes by User ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/bypass_codes",
											"protocol": "https",
											"host": [
												"{{child_admin_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"users",
												"[user_id]",
												"bypass_codes"
											],
											"query": [
												{
													"key": "limit",
													"value": null,
													"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Retrive Bypass Codes",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/bypass_codes",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"bypass_codes"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Bypass Codes by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/bypass_codes/[bypass_code_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"bypass_codes",
										"[bypass_code_id]"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Bypass Code",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/bypass_codes/[bypass_code_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"bypass_codes",
										"[bypass_code_id]"
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#bypass-codes"
				},
				{
					"name": "Integrations",
					"item": [
						{
							"name": "Retrieve Integrations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/integrations",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"integrations"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-integrations"
							},
							"response": []
						},
						{
							"name": "Create Integrations",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/integrations?name&type",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"integrations"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Required"
										},
										{
											"key": "type",
											"value": null,
											"description": "Required"
										},
										{
											"key": "adminapi_admins",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_info",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_integrations",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_read_log",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_read_resource",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_settings",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_write_resource",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "enroll_policy",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "greeting",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "groups_allowed",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "ip_whitelist",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "ip_whitelist",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "networks_for_api_access",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "notes",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "trusted_device_days",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "self_service_allowed",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "username_normalization_policy",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#create-integration"
							},
							"response": []
						},
						{
							"name": "Retrieve Integration by Integration Key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/integrations/[integration_key]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"integrations",
										"[integration_key]"
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-integration-by-integration-key"
							},
							"response": []
						},
						{
							"name": "Modify Integration",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/integrations/[integration_key]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"integrations",
										"[integration_key]"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "networks_for_api_access",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_admins",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_info",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_integrations",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_read_log",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_read_resource",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_settings",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "adminapi_write_resource",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "trusted_device_days",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "enroll_policy",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "greeting",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "groups_allowed",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "ip_whitelist",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "ip_whitelist_enroll_policy",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "ip_whitelist_enroll_policy",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "policy_key",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "reset_secret_key",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "self_service_allowed",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "username_normalization_policy",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#modify-integration"
							},
							"response": []
						},
						{
							"name": "Delete Integration",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/integrations/[integration_key]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"integrations",
										"[integration_key]"
									]
								},
								"description": "https://duo.com/docs/adminapi#delete-integration"
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#integrations"
				},
				{
					"name": "Endpoints",
					"item": [
						{
							"name": "Retrieve Endpoints",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/endpoints",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"endpoints"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-endpoints"
							},
							"response": []
						},
						{
							"name": "Retrieve Endpoints by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/endpoints/[epkey]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"endpoints",
										"[epkey]"
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-endpoint-by-id"
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#endpoints"
				},
				{
					"name": "Administrators",
					"item": [
						{
							"name": "Retrieve Administrators",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-administrators"
							},
							"response": []
						},
						{
							"name": "Create Administrators",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins?email&name",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins"
									],
									"query": [
										{
											"key": "email",
											"value": null,
											"description": "Required"
										},
										{
											"key": "name",
											"value": null,
											"description": "Required"
										},
										{
											"key": "phone",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "role",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "restricted_by_admin_units",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "send_email",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "token_id",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "valid_days",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#create-administrator"
							},
							"response": []
						},
						{
							"name": "Retrieve Administrator by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-administrator-by-id"
							},
							"response": []
						},
						{
							"name": "Modify Administrator",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "phone",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "password_change_required",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "role",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "restricted_by_admin_units",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "status",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "token_id",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#modify-administrator"
							},
							"response": []
						},
						{
							"name": "Delete Administrator",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#delete-administrator"
							},
							"response": []
						},
						{
							"name": "Reset Administrator Authentication Attempts",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/reset",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]",
										"reset"
									]
								},
								"description": "https://duo.com/docs/adminapi#reset-administrator-authentication-attempts"
							},
							"response": []
						},
						{
							"name": "Email Activation Link to Administrator Pending Activation",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/activation_link/email",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]",
										"activation_link",
										"email"
									]
								},
								"description": "https://duo.com/docs/adminapi#email-activation-link-to-administrator-pending-activation"
							},
							"response": []
						},
						{
							"name": "Delete Activation Link to Administrator Pending Activation",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/activation_link",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]",
										"activation_link"
									]
								},
								"description": "https://duo.com/docs/adminapi#delete-activation-link-from-administrator-pending-activation"
							},
							"response": []
						},
						{
							"name": "Create Activation Link for Administrator Pending Activation",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/activation_link",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]",
										"activation_link"
									]
								},
								"description": "https://duo.com/docs/adminapi#create-activation-link-for-administrator-pending-activation"
							},
							"response": []
						},
						{
							"name": "Create Administrator Activation Link",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/activations?email",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"activations"
									],
									"query": [
										{
											"key": "email",
											"value": null,
											"description": "Required"
										},
										{
											"key": "admin_name",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "admin_role",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "send_email",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "valid_days",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#create-administrator-activation-link"
							},
							"response": []
						},
						{
							"name": "Retrieve Pending Administrator Activation",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/activations?limit&offset",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"activations"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional"
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional"
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-pending-administrator-activations"
							},
							"response": []
						},
						{
							"name": "Delete Pending Administrator Activation",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/activations/[admin_activation_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"activations",
										"[admin_activation_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#delete-pending-administrator-activation"
							},
							"response": []
						},
						{
							"name": "Retrieve Admin External Password Management Status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/password_mgmt?limit&offset",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"password_mgmt"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional"
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional"
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-admin-external-password-management-status"
							},
							"response": []
						},
						{
							"name": "Retrieve Admin External Password Management Status by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/password_mgmt",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]",
										"password_mgmt"
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-admin-external-password-management-status-by-id"
							},
							"response": []
						},
						{
							"name": "Modify Admin External Password Management Status or Password",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/password_mgmt",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]",
										"password_mgmt"
									],
									"query": [
										{
											"key": "has_external_password_mgmt",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "password",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#modify-admin-external-password-management-status-or-password"
							},
							"response": []
						},
						{
							"name": "Retrieve Administrator Authentication Factors",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/allowed_auth_methods",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"allowed_auth_methods"
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-administrator-authentication-factors"
							},
							"response": []
						},
						{
							"name": "Restrict Administrator Authentication Factors",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/allowed_auth_methods",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"allowed_auth_methods"
									],
									"query": [
										{
											"key": "hardware_token_enabled",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "mobile_otp_enabled",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "push_enabled",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "sms_enabled",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "voice_enabled",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "yubikey_enabled",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#restrict-administrator-authentication-factors"
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#administrators"
				},
				{
					"name": "Administrative Units",
					"item": [
						{
							"name": "Retrieve Administrative Units",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units"
									],
									"query": [
										{
											"key": "admin_id",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "group_id",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "integration_key",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "limit",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-administrative-units"
							},
							"response": []
						},
						{
							"name": "Retrieve Administrative Unit Details",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-administrative-unit-details"
							},
							"response": []
						},
						{
							"name": "Add Administrative Unit",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units?name&description",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Required"
										},
										{
											"key": "description",
											"value": null,
											"description": "Required"
										},
										{
											"key": "restrict_by_groups",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "restrict_by_integrations",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "admins",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "groups",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "integrations",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#add-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Modify Administrative Unit",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "description",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "restrict_by_groups",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "restrict_by_integrations",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "admins",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "groups",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "integrations",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#modify-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Add Administrator to Administrative Unit",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/admin/[admin_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]",
										"admin",
										"[admin_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#add-administrator-to-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Remove Administrator from Administrative Unit",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/admin/[admin_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]",
										"admin",
										"[admin_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#remove-administrator-from-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Add Group to Administrative Unit",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/group/[goup_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]",
										"group",
										"[goup_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#add-group-to-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Remove Group from Administrative Unit",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/group/[goup_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]",
										"group",
										"[goup_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#remove-group-from-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Add Integration to Administrative Unit",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/integration/[integration_key]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]",
										"integration",
										"[integration_key]"
									]
								},
								"description": "https://duo.com/docs/adminapi#add-integration-to-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Remove Integration from Administrative Unit",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/integration/[integration_key]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]",
										"integration",
										"[integration_key]"
									]
								},
								"description": "https://duo.com/docs/adminapi#remove-integration-from-administrative-unit"
							},
							"response": []
						},
						{
							"name": "Delete Administrative Unit",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"administrative_units",
										"[admin_unit_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#delete-administrative-unit"
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#administrative-units"
				},
				{
					"name": "Logs",
					"item": [
						{
							"name": "Authentication Logs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v2/logs/authentication?mintime=1613722194760&maxtime=1614722194860",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v2",
										"logs",
										"authentication"
									],
									"query": [
										{
											"key": "limit",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "next_offset",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "ts:asc",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "mintime",
											"value": "1613722194760",
											"description": "Required"
										},
										{
											"key": "maxtime",
											"value": "1614722194860",
											"description": "Required"
										},
										{
											"key": "applications",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "users",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "event_types",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "factors",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "groups",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "phone_numbers",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "reasons",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "results",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "registration_id",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "token_id",
											"value": "",
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "webauthnkey",
											"value": "",
											"description": "Optional",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication Logs (Legacy v1)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/logs/authentication",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"logs",
										"authentication"
									],
									"query": [
										{
											"key": "mintime",
											"value": "",
											"description": "Optional",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Administrator Logs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/logs/administrator",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"logs",
										"administrator"
									],
									"query": [
										{
											"key": "mintime",
											"value": "",
											"description": "Optional",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Telephony Logs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/logs/telephony",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"logs",
										"telephony"
									],
									"query": [
										{
											"key": "mintime",
											"value": "",
											"description": "Optional",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Offline Enrollment Logs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/logs/offline_enrollment",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"logs",
										"offline_enrollment"
									],
									"query": [
										{
											"key": "mintime",
											"value": "",
											"description": "Optional",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#logs"
				},
				{
					"name": "Trust Monitor",
					"item": [
						{
							"name": "Retrieve Events",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/trust_monitor/events",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"trust_monitor",
										"events"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										},
										{
											"key": "mintime",
											"value": "1613722194760",
											"description": "Required: Return records that have a 13 character Unix timestamp in milliseconds of mintime or later. This value must be strictly less then maxtime.",
											"disabled": true
										},
										{
											"key": "maxtime",
											"value": "1614722194860",
											"description": "Required: Return records that have a 13 character Unix timestamp in milliseconds of maxtime or earlier. This value must be strictly greater then mintime.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "",
											"description": "Optional: The type of security event.\n\nauth\tReturn security events that are denied anomalous authentications.\n\nbypass_status_enabled\tReturn security events that are bypass status enabled.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#trust-monitor"
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "Retrieve Settings Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/settings",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify Settings",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/settings",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"settings"
									],
									"query": [
										{
											"key": "caller_id",
											"value": "",
											"description": "Optional: Automated calls will appear to come from this number. This does not apply to text messages. Customizing this number may cause telephony providers to flag your number as fraudulent and result in failed user authentications.",
											"disabled": true
										},
										{
											"key": "fraud_email",
											"value": "\"\"",
											"description": "Optional: The email address to be notified when a user reports a fraudulent authentication attempt or is locked out due to failed authentication attempts, or empty for all administrators will be notified. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.",
											"disabled": true
										},
										{
											"key": "fraud_email_enabled",
											"value": null,
											"description": "Optional: Set to true to enable fraudulent authentication notification emails. False disables the fraud email functionality. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.",
											"disabled": true
										},
										{
											"key": "inactive_user_expiration",
											"value": null,
											"description": "Optional: Users will be automatically deleted if they are inactive (no successful logins) for a this amount of days. Minimum: 30 days. Maximum: 365 days.",
											"disabled": true
										},
										{
											"key": "keypress_confirm",
											"value": null,
											"description": "Optional: The key for users to press to authenticate, or empty if any key should be pressed to authenticate. If this is empty, keypress_fraud must be as well.",
											"disabled": true
										},
										{
											"key": "keypress_fraud",
											"value": null,
											"description": "Optional: The key for users to report fraud, or empty if any key should be pressed to authenticate. If this is empty, keypress_confirm must be as well.\n",
											"disabled": true
										},
										{
											"key": "language",
											"value": null,
											"description": "Optional: Sets the language used in the browser-based user authentication prompt. One of: “EN”, “DE”, “FR”. Default: “EN”",
											"disabled": true
										},
										{
											"key": "lockout_expire_duration",
											"value": null,
											"description": "Optional: If non-zero, the time in minutes until a locked-out user’s status reverts to “Active”. If 0, a user remains locked out until their status is manually changed (By an admin or API call). Minimum: 5 minutes. Maximum: 30000 minutes.",
											"disabled": true
										},
										{
											"key": "lockout_threshold",
											"value": null,
											"description": "Optional: The number of consecutive failed authentication attempts before the user’s status is set to “Locked Out” and the user is denied access.",
											"disabled": true
										},
										{
											"key": "minimum_password_length",
											"value": null,
											"description": "Optional: The minimum number of characters that an administrator’s Duo Admin Panel password must contain. This is only enforced on password creation and reset; existing passwords will not be invalidated. \n\nDefault: 12.",
											"disabled": true
										},
										{
											"key": "mobile_otp_enabled",
											"value": null,
											"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use authenticate with a passcode generated by Duo Mobile. If false, users will not be able to authenticate with a passcode generated by Duo Mobile. Note that if false, this will override Duo Mobile passcodes for any groups.",
											"disabled": true
										},
										{
											"key": "password_requires_lower_alpha",
											"value": null,
											"description": "Optional: If true, administrator passwords will be required to contain a lower case alphabetic character. If false, administrator passwords will not be required to contain a lower case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
											"disabled": true
										},
										{
											"key": "password_requires_numeric",
											"value": null,
											"description": "Optional: If true, administrator passwords will be required to contain a numeric character. If false, administrator passwords will not be required to contain a numeric character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
											"disabled": true
										},
										{
											"key": "password_requires_special",
											"value": null,
											"description": "Optional: If true, administrator passwords will be required to contain a special (non-alphanumeric) character. If false, administrator passwords will not be required to contain a special (non-alphanumeric) character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
											"disabled": true
										},
										{
											"key": "password_requires_upper_alpha",
											"value": null,
											"description": "Optional: If true, administrator passwords will be required to contain an upper case alphabetic character. If false, administrator passwords will not be required to contain an upper case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
											"disabled": true
										},
										{
											"key": "push_enabled",
											"value": null,
											"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use Duo Push to authenticate. If false, users will not be able to use Duo Push to authenticate. Note that if false, this will override push_enabled for any groups.",
											"disabled": true
										},
										{
											"key": "sms_batch",
											"value": null,
											"description": "Optional: How many passcodes to send at one time, up to 10.",
											"disabled": true
										},
										{
											"key": "sms_enabled",
											"value": null,
											"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use SMS passcodes to authenticate. If false, users will not be able to use SMS passcodes to authenticate. Note that if false, this will override sms_enabled for any groups.",
											"disabled": true
										},
										{
											"key": "sms_expiration",
											"value": null,
											"description": "Optional: The time in minutes to expire and invalidate SMS passcodes, or empty if they should not expire.",
											"disabled": true
										},
										{
											"key": "sms_message",
											"value": null,
											"description": "Optional: Description sent with every batch of SMS passcodes.",
											"disabled": true
										},
										{
											"key": "sms_refresh",
											"value": null,
											"description": "Optional: If 1, a new set of SMS passcodes will automatically be sent after the last one is used. If 0, a new set will not be sent.",
											"disabled": true
										},
										{
											"key": "telephony_warning_min",
											"value": null,
											"description": "Optional: Configure a alert to be sent when the account has fewer than this many telephony credits remaining.",
											"disabled": true
										},
										{
											"key": "timezone",
											"value": null,
											"description": "Optional: This is the timezone used when displaying timestamps in the Duo Admin Panel. Timezones must be entries in the IANA Time Zone Database, for example, “US/Eastern”, “Australia/Darwin”, “GMT”.",
											"disabled": true
										},
										{
											"key": "voice_enabled",
											"value": null,
											"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to authenticate using voice callback. If false, users will not be able to authenticate using voice callback. Note that if false, this will override voice_enabled for any groups.",
											"disabled": true
										},
										{
											"key": "user_telephony_cost_max",
											"value": null,
											"description": "Optional: The maximum number of telephony credits a user may consume in a single authentication event. This excludes Duo administrators authenticating to the Duo administration panel. Default: 20.",
											"disabled": true
										},
										{
											"key": "u2f_enabled",
											"value": null,
											"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use authenticate with a U2F device. If false, users will not be able to authenticate with a U2F device. Default: false.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Duo Mobile Logo",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/logo",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"logo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify Duo Mobile Logo Copy",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/logo",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"logo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Duo Mobile Logo",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/logo",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"logo"
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#settings"
				},
				{
					"name": "Account Info",
					"item": [
						{
							"name": "Retrieve Summary",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "",
											"description": "Optional: Specify a user name (or username alias) to look up a single user.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Telephony Credits Used Report Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "",
											"description": "Optional: Specify a user name (or username alias) to look up a single user.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication Attempts Report",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/info/authentication_attempts",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"info",
										"authentication_attempts"
									],
									"query": [
										{
											"key": "maxtime",
											"value": "",
											"description": "Optional: Limit report to events before this UNIX timestamp. Defaults to the current time.",
											"disabled": true
										},
										{
											"key": "mintime",
											"value": null,
											"description": "Optional: Limit report to events after this UNIX timestamp. Defaults to thirty days before maxtime.\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Users with Authentication Attempts Report",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/info/user_authentication_attempts",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"info",
										"user_authentication_attempts"
									],
									"query": [
										{
											"key": "maxtime",
											"value": "",
											"description": "Optional: Limit report to events before this UNIX timestamp. Defaults to the current time.",
											"disabled": true
										},
										{
											"key": "mintime",
											"value": null,
											"description": "Optional: Limit report to events after this UNIX timestamp. Defaults to thirty days before maxtime.\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "https://duo.com/docs/adminapi#account-info"
				}
			],
			"description": "# Task 1: Add a Duo User\n\nA new employee has joined the team, and they need access to Duo-protected applications. As an IT administrator, your task is to onboard the user by creating their Duo account, registering their phone, and linking the phone to their user profile. This ensures they can securely authenticate when accessing company resources.\n\n## **1\\. Create User**\n\n**Navigate to the** **Duo Admin API** collection >> **Users** >> **Create User**\n\n1. Go to the **Params** tab and provide a username for the user.\n    \n    - If you are in **seat 1**, name the user `whoami1`.\n        \n    - If you are in **seat 16**, name the user `whoami16`.\n        \n2. Save the changes. Click the **Send** button to execute the API call.\n    \n\n## **2\\. Create Phone**\n\nNavigate to the **Duo Admin API** collection >> **Phones** >> **Create Phone**\n\n1. Go to the **Params** tab and enter a valid phone number.\n    \n    - If you are in **seat 1**, input the following phone number `7345551201`\n        \n    - If you are in **seat 16**, input the following phone number `7345551216`\n        \n2. Save the changes. Click the **Send** button to execute the API call.\n    \n\n## **3\\. Attach Phone to User**\n\n**Navigate to the** **Duo Admin API** collection >> **Users** >> **Associate Phone with User**\n\n1. The `{{user_id}}` and `{{phone_id}}` variables will be automatically populated from the previous API calls.\n    \n2. Save the changes. Click the **Send** button to execute the API call.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Tested on Postman 7.8",
							"",
							"// Variable declaration",
							"// Require 'url' module to use its methods for handling and transforming URLs.",
							"var URL = require('url');",
							"",
							"// Get the hostname for the accounts API from Postman collection variables.",
							"var hostname = pm.collectionVariables.get(\"child_admin_api_host\");",
							"",
							"// Declare a variable to hold Duo Authentication Version",
							"var duo_auth_ver;",
							"// Retrieve the request url",
							"var req_url = pm.request.url.toString();",
							"",
							"function urlEncodeParams(value, index, array) {",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
							"}",
							"",
							"function getAuthHeader(httpMethod, hostname, path, q_str, requestBody, duo_auth_ver) {",
							"    var IKEY = pm.collectionVariables.get(\"child_admin_api_ikey\"); //Auth or Admin API IKEY",
							"    var SKEY = pm.collectionVariables.get(\"child_admin_api_skey\"); //Auth or Admin API SKEY",
							"    var API_HOSTNAME = pm.collectionVariables.get(\"child_admin_api_host\"); //Auth or Admin API Hostname",
							"",
							"    q_str = decodeURIComponent(q_str);",
							"    api_call = path;",
							"",
							"    var AUTH_TYPE;",
							"    var hmacDigest;",
							"",
							"    // The current time, formatted as RFC 2822. This must be the same string as the \"Date\" header (or X-Duo-Date header).",
							"    var moment = require('moment');",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
							"    pm.globals.set(\"timestampHeader\", timestamp);",
							"",
							"    switch (duo_auth_ver) {",
							"        case 'v2':",
							"            AUTH_TYPE = 'HMAC-SHA1';",
							"            var params_unsorted = \"\";",
							"            var params_array = [];",
							"            // Create unsorted array of parameters from either URL or Body",
							"            // Assuming POST parameters are in the Body, GET parameters are in URL",
							"            if (Object.keys(requestBody).length !== 0) {",
							"                for (var parameter1 in requestBody) {",
							"                    params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
							"                    params_array.push(params_unsorted);",
							"                }",
							"            } else {",
							"                params_unsorted = q_str;",
							"                if (q_str) {",
							"                    params_array = params_unsorted.split(\"&\");",
							"                }",
							"            }",
							"",
							"            params_array.sort(); // Lexicographically sort parameters by key",
							"            var encoded_params = \"\";",
							"            if (params_array[0] !== \"\") { // Check if there are any Params to encode and create the string from",
							"                var encoded_params_array = params_array.map(urlEncodeParams); // Create URL-encoded array of key=value pairs from the sorted array",
							"                encoded_params = encoded_params_array.join(\"&\"); // Create string of parameters joined by &",
							"            }",
							"            var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params;",
							"            var CryptoJS = require('crypto-js');",
							"            // console.log(\"Request Data:\", requestData);",
							"            var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
							"            pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });",
							"            break;",
							"        case 'v5':",
							"            AUTH_TYPE = 'HMAC-SHA512';",
							"            var body_length = Object.keys(requestBody).length;",
							"            var encoded_params = \"\";",
							"            var requestData = \"\";",
							"",
							"            if (body_length != 0) {",
							"                var jsonData = JSON.parse(pm.request.body.toJSON().raw);",
							"                jsonData = JSON.stringify(jsonData);",
							"                params_unsorted = q_str;",
							"                if (params_unsorted.length > 0) {",
							"                    params_array = params_unsorted.split(\"&\");",
							"                    params_array.sort();",
							"                    var encoded_params_array = params_array.map(urlEncodeParams);",
							"                    encoded_params = encoded_params_array.join(\"&\");",
							"                }",
							"                var CryptoJS = require('crypto-js');",
							"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(jsonData) + \"\\n\" + CryptoJS.SHA512(\"\");",
							"                pm.request.body = jsonData;",
							"            } else {",
							"                params_unsorted = q_str;",
							"                if (params_unsorted.length > 0) {",
							"                    params_array = params_unsorted.split(\"&\");",
							"                    params_array.sort();",
							"                    var encoded_params_array = params_array.map(urlEncodeParams);",
							"                    encoded_params = encoded_params_array.join(\"&\");",
							"                }",
							"                var CryptoJS = require('crypto-js');",
							"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");",
							"            }",
							"            // console.log(\"Request Data:\", requestData);",
							"            var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
							"            break;",
							"    }",
							"",
							"    // Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
							"    var prebase = IKEY + \":\" + hmacDigest;",
							"",
							"    // Encodes a string in base-64",
							"    var btoa = require('btoa');",
							"    var baseComplete = btoa(prebase);",
							"",
							"    var authHeader = \"Basic \" + baseComplete;",
							"    return authHeader;",
							"}",
							"",
							"// Find and replace",
							"// Check if the request url includes '/v1/' or '/v2/' and set the Duo Authentication Version accordingly",
							"if (req_url.includes('/v1/')) {",
							"    duo_auth_ver = 'v2';",
							"} else if (req_url.includes('/v2/')) {",
							"    duo_auth_ver = 'v5';",
							"}",
							"",
							"// Replace {{user_id}} in the path",
							"if (req_url.includes('{{user_id}}')) {",
							"    var user_id = pm.collectionVariables.get('user_id');",
							"    req_url = req_url.replace('{{user_id}}', user_id);",
							"}",
							"",
							"// Replace {{user_id}} in the path",
							"if (req_url.includes('{{phone_id}}')) {",
							"    var phone_id = pm.collectionVariables.get('phone_id');",
							"    req_url = req_url.replace('{{phone_id}}', phone_id);",
							"}",
							"",
							"// Check if the request URL includes '{{accountId}}'",
							"if (req_url.includes('{{account_id}}')) {",
							"    var account_id = pm.globals.get('account_id');",
							"    req_url = req_url.replace('{{account_id}}', account_id);",
							"}",
							"",
							"// Parse the query string from the request url",
							"var q_str = URL.parse(req_url).query;",
							"",
							"// Check if the query string is null. If it is, set it to an empty string",
							"if (q_str == null) {",
							"    q_str = \"\";",
							"}",
							"",
							"// Parse the path from the request url, remove the leading '/', then rejoin the path",
							"// Replace variables in path",
							"var path = decodeURIComponent(URL.parse(req_url).pathname).split(\"/\");",
							"path = path.slice(1);",
							"path = path.join('/');",
							"path = '/' + path;",
							"",
							"if (path.includes('{{user_id}}')) {",
							"    var user_id = pm.collectionVariables.get('user_id');",
							"    path = path.replace('{{user_id}}', user_id);",
							"}",
							"",
							"if (path.includes('{{phone_id}}')) {",
							"    var phone_id = pm.collectionVariables.get('phone_id');",
							"    path = path.replace('{{phone_id}}', phone_id);",
							"}",
							"",
							"pm.globals.set(\"hmacAuthHeader\", getAuthHeader(pm.request.method, hostname, path, q_str, pm.request.body, duo_auth_ver));",
							"",
							"pm.request.headers.add({ key: 'Date', value: \"{{timestampHeader}}\" });",
							"pm.request.headers.add({ key: 'Authorization', value: \"{{hmacAuthHeader}}\" });",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Duo Accounts API w/ Admin API",
			"item": [
				{
					"name": "Duo Onboarding",
					"item": [
						{
							"name": "Account & Settings Management",
							"item": [
								{
									"name": "Create Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the JSON response",
													"var responseData = JSON.parse(pm.response.text());",
													"",
													"// Extract the account ID and API Hostname",
													"var account_id = responseData.response.account_id;",
													"var api_hostname = responseData.response.api_hostname",
													"var name = responseData.response.name",
													"// console.log(api_hostname) ",
													"",
													"// Set the account ID as a collection variable",
													"pm.collectionVariables.set(\"client_account_id\", account_id);",
													"// pm.collectionVariables.set(\"child_account_name\", name);",
													"pm.collectionVariables.set(\"client_api_hostname\", api_hostname)",
													"//pm.globals.set(\"ChildAccount\", name)",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\", ChildAccount);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    if (pm.response.code === 200) {",
													"        console.log(pm.collectionVariables.get('client_account_name') + ' was created successfully');",
													"    } else {",
													"        console.log('There was an issue creating the account: ' + pm.collectionVariables.get('client_account_name'));",
													"    }",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"disabled": true
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/accounts/v1/account/create?name={{client_account_name}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"accounts",
												"v1",
												"account",
												"create"
											],
											"query": [
												{
													"key": "name",
													"value": "{{client_account_name}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify Edition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get the response code from the response object",
													"var responseBody = pm.response.json();",
													"var stat = responseBody.stat;",
													"var responseCode = pm.response.code;",
													"",
													"// Get the URL from the request",
													"var url = pm.request.url;",
													"",
													"// Extract the edition parameter from the URL",
													"var edition = pm.request.url.query.get('edition');",
													"",
													"//Get account name",
													"// var accountId = pm.collectionVariables.get('account_id');",
													"var newChildAccount= pm.collectionVariables.get(\"client_account_name\", newChildAccount);",
													"",
													"// Perform actions based on the edition",
													"if ((responseCode === 200 || stat === \"OK\") && edition === \"ENTERPRISE\") {",
													"    console.log(`Edition updated to Duo Essentials successfully for ${newChildAccount}`);",
													"} else if ((responseCode === 200 || stat === \"OK\") && edition === \"PLATFORM\") {",
													"    console.log(`Edition updated to Duo Advantage successfully for ${newChildAccount}`);",
													"} else if ((responseCode === 200 || stat === \"OK\") && edition === \"BEYOND\") {",
													"    console.log(`Edition updated to Duo Premier successfully for ${newChildAccount}`);",
													"} else {",
													"    console.log(\"Edition not recognized\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/billing/edition?account_id={{client_account_id}}&edition=",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"billing",
												"edition"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT MODIFY"
												},
												{
													"key": "edition",
													"value": "",
													"description": "The edition to set. This should be one of:\nENTERPRISE = Duo Essentials edition.\nPLATFORM = Duo Advantage edition.\nBEYOND = Duo Premier edition."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify Settings",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Get Account ID",
													"var accountId = pm.collectionVariables.get('client_account_id');",
													"var client_account_name= pm.collectionVariables.get(\"client_account_name\", client_account_name);",
													"",
													"if (pm.response.code === 200) {",
													"    console.log(`Account settings updated successfully for ${client_account_name}`);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/settings?caller_id=12485552794&email_activity_notification_enabled=true&fraud_email=msp_admin@ciscoliveemea.com&fraud_email_enabled=true&helpdesk_bypass=limit&helpdesk_bypass_expiration=30&helpdesk_can_send_enroll_email=true&inactive_user_expiration=30&keypress_confirm=3&keypress_fraud=0&language=EN&lockout_expire_duration=60&lockout_threshold=3&log_retention_days=365&minimum_password_length=20&password_requires_lower_alpha=true&password_requires_numeric=true&password_requires_special=true&password_requires_upper_alpha=true&push_activity_notification_enabled=true&sms_batch=5&sms_expiration=120&sms_message=Use these Duo SMS passcodes for 2FA authentication&sms_refresh=1&timezone=US/Eastern&user_managers_can_put_users_in_bypass=false&user_telephony_cost_max=30&account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"settings"
											],
											"query": [
												{
													"key": "caller_id",
													"value": "12485552794",
													"description": "Automated calls will appear to come from this number. This does not apply to text messages. Customizing this number may cause telephony providers to flag your number as fraudulent and result in failed user authentications.\n\nExample US number: \"12485552794\"\nExample Canadian number: \"14165557890\"\n"
												},
												{
													"key": "email_activity_notification_enabled",
													"value": "true",
													"description": "If true, users will receive an email notification when an authentication device is added or removed. If set to false, no email notifications are sent in these situations. Default value is false."
												},
												{
													"key": "fraud_email",
													"value": "msp_admin@ciscoliveemea.com",
													"description": "The email address to be notified when a user reports a fraudulent authentication attempt or is locked out due to failed authentication attempts, or empty for all administrators will be notified. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared."
												},
												{
													"key": "fraud_email_enabled",
													"value": "true",
													"description": "Set to true to enable fraudulent authentication notification emails. False disables the fraud email functionality. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared."
												},
												{
													"key": "helpdesk_bypass",
													"value": "limit",
													"description": "Grants permission for administrators with the Help Desk role to generate bypass codes for users. The default value allow permits unrestricted generation of bypass codes, limit plus a value for helpdesk_bypass_expiration allows Help Desk admins to generate bypass codes with a preset expirtation, and deny prevents Help Desk admins from generating any bypass codes."
												},
												{
													"key": "helpdesk_bypass_expiration",
													"value": "30",
													"description": "Integer specifying a default expiration for bypass codes generated by Help Desk admins, in minutes. If not set, Help Desk admins may change bypass code expiration from the default 60 minutes after creation if helpdesk_bypass is set to allow. If specifying a value, also set helpdesk_bypass to limit."
												},
												{
													"key": "helpdesk_can_send_enroll_email",
													"value": "true",
													"description": "Permits Help Desk administrators to send or resend enrollment emails to users. Set to true to allow sending of enrollment emails. Default value is false."
												},
												{
													"key": "inactive_user_expiration",
													"value": "30",
													"description": "Users will be automatically deleted if they are inactive (no successful logins) for this number of days. Minimum: 30 Maximum: 365"
												},
												{
													"key": "keypress_confirm",
													"value": "3",
													"description": "The key for users to press to authenticate, or empty if any key should be pressed to authenticate. If this is empty, keypress_fraud must be as well."
												},
												{
													"key": "keypress_fraud",
													"value": "0",
													"description": "The key for users to report fraud, or empty if any key should be pressed to authenticate. If this is empty, keypress_confirm must be as well."
												},
												{
													"key": "language",
													"value": "EN",
													"description": "Sets the language used in the browser-based user authentication prompt. One of: \"EN\", \"DE\", \"FR\". Default: \"EN\""
												},
												{
													"key": "lockout_expire_duration",
													"value": "60",
													"description": "If non-zero, the time in minutes until a locked-out user's status reverts to \"Active\". If 0, a user remains locked out until their status is manually changed (By an admin or API call). Minimum: 5 Maximum: 30000"
												},
												{
													"key": "lockout_threshold",
													"value": "3",
													"description": "The number of consecutive failed authentication attempts before the user's status is set to \"Locked Out\" and the user is denied access. Default is 10 attempts. Minimum: 1 Maximum: 9999"
												},
												{
													"key": "log_retention_days",
													"value": "365",
													"description": "When set, log entries older than the specified number of days are purged. Logs retained indefinitely if null. Note that the log retention setting does not change the 180 day limitation for viewing and retrieving log information in the Duo Admin Panel, exported reports, or via this API. Default: null (no retention limit). Minimum: 1 day. Maximum: 365 days."
												},
												{
													"key": "minimum_password_length",
													"value": "20",
													"description": "The minimum number of characters that an administrator's Duo Admin Panel password must contain. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: 12. Minimum: 12 Maximum: 100"
												},
												{
													"key": "password_requires_lower_alpha",
													"value": "true",
													"description": "If true, administrator passwords will be required to contain a lower case alphabetic character. If false, administrator passwords will not be required to contain a lower case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
												},
												{
													"key": "password_requires_numeric",
													"value": "true",
													"description": "If true, administrator passwords will be required to contain a numeric character. If false, administrator passwords will not be required to contain a numeric character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
												},
												{
													"key": "password_requires_special",
													"value": "true",
													"description": "If true, administrator passwords will be required to contain a special (non-alphanumeric) character. If false, administrator passwords will not be required to contain a special (non-alphanumeric) character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
												},
												{
													"key": "password_requires_upper_alpha",
													"value": "true",
													"description": "If true, administrator passwords will be required to contain an upper case alphabetic character. If false, administrator passwords will not be required to contain an upper case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
												},
												{
													"key": "push_activity_notification_enabled",
													"value": "true",
													"description": "If true, users will receive a Duo Mobile notification when an authentication device is added or removed. If set to false, no email notifications are sent in these situations. Default value is false."
												},
												{
													"key": "sms_batch",
													"value": "5",
													"description": "The number of passcodes to send at one time, up to 10."
												},
												{
													"key": "sms_expiration",
													"value": "120",
													"description": "The time in minutes to expire and invalidate SMS passcodes, or empty if they should not expire."
												},
												{
													"key": "sms_message",
													"value": "Use these Duo SMS passcodes for 2FA authentication",
													"description": "Description sent with every batch of SMS passcodes."
												},
												{
													"key": "sms_refresh",
													"value": "1",
													"description": "If 1, a new set of SMS passcodes will automatically be sent after the last one is used. If 0, a new set will not be sent."
												},
												{
													"key": "telephony_warning_min",
													"value": "",
													"description": "Configure a alert to be sent when the account has fewer than this many telephony credits remaining.",
													"disabled": true
												},
												{
													"key": "timezone",
													"value": "US/Eastern",
													"description": "This is the timezone used when displaying timestamps in the Duo Admin Panel. Timezones must be entries in the IANA Time Zone Database, for example, \"US/Eastern\", \"Australia/Darwin\", \"GMT\"."
												},
												{
													"key": "user_managers_can_put_users_in_bypass",
													"value": "false",
													"description": "Permits User Manager administrators to apply \"Bypass\" status to users. Set to false to prevent User Managers from applying \"Bypass\" status. Default value is true."
												},
												{
													"key": "user_telephony_cost_max",
													"value": "30",
													"description": "The maximum number of telephony credits a user may consume in a single authentication event. This excludes Duo administrators authenticating to the Duo administration panel. If you know the countries from which your users expect to authenticate with phone callback we recommend adjusting this down from the default to match the most expensive expected country to help avoid misuse, using the values from the Telephony Credits documentation. Default: 20."
												},
												{
													"key": "account_id",
													"value": "{{client_account_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify Custom Branding",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Get Account ID",
													"var accountId = pm.collectionVariables.get('client_account_id');",
													"var client_account_name= pm.collectionVariables.get(\"client_account_name\", client_account_name);",
													"",
													"if (pm.response.code === 200) {",
													"    console.log(`Custom Branding updated successfully for ${client_account_name}`);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/branding?powered_by_duo=true&account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"branding"
											],
											"query": [
												{
													"key": "background_img",
													"value": "",
													"disabled": true
												},
												{
													"key": "card_accent_color",
													"value": "",
													"disabled": true
												},
												{
													"key": "logo",
													"value": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAhCAYAAACxzQkrAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2xJREFUeNpi/P//P8NgAozDykFubm4cQUCgqqqqLi4uLgYT/wAEj4Fg/fr161atWvWCLg6qra118AcCDg6OAjzKZpwFgvj4+Dk0dVB7e7uXLxAAmRlEKJ9xGQgiIyOnEWM2E6mOKSwsNCHBMSCQoQsEM2bMiKKJg1xdXV1IcAzcUSYmJqagNEdVB6WkpKjJycnJk5PmQGnNCwio6iCgL03ICB04UAMCqjqIn59fgJIyRkxMTJzaDuKjxEHAaOOgONuDchU0IYN9CEoLwHKPYffu3QynT59m0NTUZEhMTMTQN3/+fIbr168zmJqagjICg4AAOHBnPHr06CEfHx//mTNnThcUFKxD18dCyMXq6uqghNyOLNbW1sawfft2Bk9PT6yOAQGQeEtLC0NTUxPDs2fPGPLz88G5DWgWLLSiyYqy9+/ff0AXy8vLA9OfPn3Cq/fJkydg2sPDg+hoJRhC+/fv32dra9sBDPIKmBgPDw9DV1cXmMYHoqOjGYC1CwOwnsMovYFRdobsqgNU/gCL/ptYDCYZgNLfzp07HZubmw+QFWUGZs4cu26LakW3nGfYfvwJRY55+PwLQ0T1boaFh/4I6Fj4SZDsIJCmR3wxlR/Yjdd/Y1VgePTyG0UOOnb5FcMndl0GkHlPeCOKNS3DlEhy0Atu76Q/TLx1MP7tp18pctCtJwj9/xjZSl5zOUcQnaiVbLLtfnE5SiKL3X72B2duApVLSBUwg4yMDIa6By9/AklWOP8Xs7AkyJ57R6YeIuigb6yKOkAqB1ns9XdecDqQl0TkrnPnzjEAG2Aoevv6+himTZvGAMydKOnnzmt2dGtygPZcB9KEHfSDRUoRm3j6hJsMMwvU4Y76+vUrg7W1NbjEBpbA4LIJVEJ/+fIFRV/DghsMfxl4CNqD00HAOMZa73z6zY3iKFAoIIcE1lK7/QzDzdc8RNmDNVFjS/3ojorpvs8wc8MtvA45efU1g0f5WZyOQS5a8IbQP0YOLvT0gw7+AhPnwkP/GPZdOM2Q4C7J4Gkpg+KQ1QeeMBy7ywnkcRPKfDnfWaRnAukrRFUdhMDjT7wMzau/MHSvPc/Ay/6H4ecfJnAIMjBwkmUexQ6CJ85/nAw/vlNuDhPDIAODzkFYo4zzz9M7kl826dLLESD7hudgw4hwEECAAQBZWUqVhXCCqwAAAABJRU5ErkJggg",
													"disabled": true
												},
												{
													"key": "page_background_color",
													"value": "",
													"disabled": true
												},
												{
													"key": "powered_by_duo",
													"value": "true"
												},
												{
													"key": "account_id",
													"value": "{{client_account_id}}"
												}
											]
										},
										"description": "Change global Duo settings on the target account."
									},
									"response": []
								},
								{
									"name": "Modify Custom Messaging",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Get Account ID",
													"var ChildAccount = pm.collectionVariables.get('client_account_name');",
													"",
													"if (pm.response.code === 200) {",
													"    console.log(`Custom messaging updated successfully for ${ChildAccount}`);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/branding/custom_messaging?account_id={{client_account_id}}&help_links=https://help.duo.com/&help_text=If you are experiencing login issues, please contact our support team at https://help.duo.com&locale=en_US",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"branding",
												"custom_messaging"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												},
												{
													"key": "help_links",
													"value": "https://help.duo.com/",
													"description": "Optional: A comma-separated list of up to two custom external links shown to users in the Universal Prompt. Each URL must begin with http:// or https://."
												},
												{
													"key": "help_text",
													"value": "If you are experiencing login issues, please contact our support team at https://help.duo.com",
													"description": "Optional: Customized text string associated with the specified locale. The user's browser's preferred language settings determine which language to show in the Universal Prompt. The first locale and message text in the list matches the default language specified in global Settings and is also shown in the traditional web prompt and in the Duo Device Health app. Up to 200 characters. No support for hyperlinks."
												},
												{
													"key": "locale",
													"value": "en_US",
													"description": "Optional: The language of the help text. One of: en_US (English), ca_ES (Catalan), cs_CZ (Czech), de_DE (German), es_ES (Spanish - Spain), es_419 (Spanish - Latin America), fi_FI (Finnish), fr_FR (French), hi_IN (Hindi), id_ID (Indonesian), it_IT (Italian), ja_JP (Japanese), ko_KR (Korean), nb_NO (Norwegian - Bokmål), nl_NL (Dutch), pl_PL (Polish), pt_BR (Portuguese - Brazil), pt_PT (Portuguese - Portugal), sv_SE (Swedish), th_TH (Thai), tr_TR (Turkish), vi_VN (Vietnamese), zh_Hans_CN (Chinese - Simplified), or zh_Hant_TW (Chinese - Traditional)."
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "### Step 1: Configure Account Management\n\n1. Define Account Name: On the _Variables_ tab of the **DEVWKS-2039** collection, input an account name in the current value column of `newChildAccounts` variable. Name the account according to your seat number. If you are in seat 7, for example, name the account DevNet.WS2.Seat7.\n    \n2. Set Duo Edition: On the _Params_ tab of the **Modify Edition** request, set the edition to Duo Advantage. Note: Use the Description for guidance on providing the correct edition format."
						},
						{
							"name": "User & Group Management",
							"item": [
								{
									"name": "Create  Duo Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status is 200",
													"if (pm.response.code === 200) {",
													"    // Parse the response as JSON data",
													"    let jsonData = pm.response.json();",
													"",
													"    // Check if the 'response' field exists and contains 'group_id'",
													"    if (jsonData.response && 'group_id' in jsonData.response) {",
													"        // Store the 'group_id' value in a variable",
													"        pm.collectionVariables.set('group_id', jsonData.response.group_id);",
													"        pm.collectionVariables.set('group_name', jsonData.response.name);",
													"        var ChildAccount = pm.collectionVariables.get(\"client_account_name\", ChildAccount);",
													"        console.log(jsonData.response.name + \" group created successfully on \" + ChildAccount);",
													"    } else {",
													"        console.error(\"Error: The 'group_id' field is not present in the response\");",
													"    }",
													"} else {",
													"    console.error(\"Error: The request did not succeed. Status code: \" + pm.response.code);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/groups?name=&account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"groups"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "The name of the group. "
												},
												{
													"key": "desc",
													"value": "",
													"description": "The description of the group. ",
													"disabled": true
												},
												{
													"key": "status",
													"value": "",
													"description": "The authentication status of the group. \n\nActive: When this status is set, the users in the group are required to complete secondary authentication.\n\nBypass: If this status is chosen, the users in the group will bypass secondary authentication after completing primary authentication.\n\nDisabled: With this status, the users in the group will not be able to authenticate.\nThe group's authentication status. May be one of:",
													"disabled": true
												},
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										},
										"description": "Create a new group."
									},
									"response": []
								},
								{
									"name": "Send User Enrollment Emails",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
													"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\");",
													"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\");",
													"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\");",
													"    var AUTH_TYPE = 'HMAC-SHA1';",
													"",
													"    if (!API_HOSTNAME) {",
													"        throw new Error(\"API_HOSTNAME is not defined\");",
													"    }",
													"    ",
													"    if (requestUrl.indexOf(\"?\") == -1) {",
													"        requestUrl += \"?\";",
													"    }",
													"    ",
													"    var paramsStart = requestUrl.indexOf(\"?\");",
													"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
													"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
													"    ",
													"    api_call = api_call.replace(\"}}\", \"\");",
													"",
													"    var params_unsorted = \"\";",
													"    var params_array = [];",
													"",
													"    if (httpMethod === \"POST\" && requestBody && Object.keys(requestBody).length !== 0) {",
													"        for (var parameter in requestBody) {",
													"            params_unsorted = parameter + \"=\" + requestBody[parameter];",
													"            params_array.push(params_unsorted);",
													"        }",
													"    } else {",
													"        params_unsorted = requestUrl.substring(paramsStart+1);",
													"        params_array = params_unsorted ? params_unsorted.split(\"&\") : [];",
													"    }",
													"    ",
													"    params_array.sort();",
													"    var encoded_params = params_array.length > 0 ? params_array.join(\"&\") : \"\";",
													"",
													"    var moment = require('moment');",
													"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
													"    pm.collectionVariables.set(\"timestampHeader\", timestamp);",
													"",
													"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params;",
													"",
													"    var CryptoJS = require('crypto-js');",
													"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
													"",
													"    var prebase = IKEY + \":\" + hmacDigest;",
													"",
													"    var btoa = require('btoa');",
													"    var baseComplete = btoa(prebase);",
													"",
													"    var authHeader = \"Basic \" + baseComplete;",
													"    return authHeader;",
													"}",
													"",
													"// Function to safely encode parameters",
													"function urlEncodeParams(value) {",
													"    const parts = value.split(/=(.+)/);",
													"    return parts.length === 2 ? parts[0] + \"=\" + encodeURIComponent(parts[1]) : value;",
													"}",
													"",
													"// Ensure usersCSV exists and is formatted correctly",
													"const csvData = pm.collectionVariables.get(\"usersCSV\") || \"\";",
													"if (!csvData.trim()) {",
													"    throw new Error(\"usersCSV collection variable is empty or undefined.\");",
													"}",
													"",
													"// Normalize line endings and split into rows",
													"const rows = csvData.trim().split(/\\r?\\n/);",
													"",
													"//console.log(\"Parsed CSV Rows:\", rows);",
													"",
													"// Function to enroll users",
													"function enrollUser(username, email, enrolledUsers) {",
													"    return new Promise((resolve, reject) => {",
													"        pm.collectionVariables.set(\"username\", username);",
													"        pm.collectionVariables.set(\"email\", email);",
													"",
													"        const accountId = pm.collectionVariables.get(\"client_account_id\");",
													"        const url = `https://${pm.collectionVariables.get(\"accounts_api_host\")}/admin/v1/users/enroll?account_id=${accountId}&username=${encodeURIComponent(username)}&email=${encodeURIComponent(email)}`;",
													"",
													"        pm.collectionVariables.set(\"hmacAuthHeader\", getAuthHeader('POST', url, {}));",
													"",
													"        pm.sendRequest({",
													"            url: url,",
													"            method: \"POST\",",
													"            header: {",
													"                \"Content-Type\": \"application/x-www-form-urlencoded\",",
													"                \"Authorization\": pm.collectionVariables.get(\"hmacAuthHeader\"),",
													"                \"Date\": pm.collectionVariables.get(\"timestampHeader\")",
													"            },",
													"            body: {}",
													"        }, function(err, res) {",
													"            if (err) {",
													"                console.error(\"Request failed for\", username, err);",
													"                return reject(err);",
													"            }",
													"",
													"            if (res.code === 200) {",
													"                enrolledUsers.push(username);",
													"                resolve();",
													"            } else {",
													"                console.warn(\"Enrollment failed for\", username, \"Response:\", res);",
													"                reject();",
													"            }",
													"        });",
													"    });",
													"}",
													"",
													"(async () => {",
													"    const enrolledUsers = [];",
													"",
													"    for (let i = 1; i < rows.length; i++) {",
													"        if (!rows[i] || !rows[i].trim()) {",
													"            console.warn(\"Skipping empty row at index\", i);",
													"            continue;",
													"        }",
													"",
													"        const columns = rows[i].split(\",\");",
													"        if (columns.length < 2) {",
													"            console.warn(\"Skipping invalid row at index\", i, \":\", rows[i]);",
													"            continue;",
													"        }",
													"",
													"        const [username, email] = columns.map(col => col.trim());",
													"",
													"        if (!username || !email) {",
													"            console.warn(\"Invalid row data at index\", i, \":\", rows[i]);",
													"            continue;",
													"        }",
													"",
													"        try {",
													"            await enrollUser(username, email, enrolledUsers);",
													"        } catch (error) {",
													"            console.error(\"Error enrolling user:\", username, error);",
													"        }",
													"    }",
													"",
													"    if (enrolledUsers.length > 0) {",
													"        console.log(\"Enrollment email sent successfully to:\", enrolledUsers.join(\", \"));",
													"    } else {",
													"        console.warn(\"No users were enrolled.\");",
													"    }",
													"})();",
													"",
													"pm.collectionVariables.unset(\"username\");",
													"pm.collectionVariables.unset(\"email\");",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "{{duo_url}}",
											"host": [
												"{{duo_url}}"
											]
										},
										"description": "Enroll a user with user name `username` and email address `email` and send them an enrollment email that expires after `valid_secs` seconds."
									},
									"response": []
								},
								{
									"name": "Add Users to Duo Group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Function to generate the HMAC Auth Header",
													"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
													"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\");",
													"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\");",
													"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\");",
													"",
													"    if (!API_HOSTNAME) {",
													"        throw new Error(\"API_HOSTNAME is not defined\");",
													"    }",
													"    ",
													"    var paramsStart = requestUrl.indexOf(\"?\");",
													"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
													"    var api_call = requestUrl.slice(hostname_length, paramsStart).replace(\"}}\", \"\");",
													"",
													"    var params_unsorted = requestUrl.substring(paramsStart + 1) || \"\";",
													"    var params_array = params_unsorted ? params_unsorted.split(\"&\") : [];",
													"",
													"    params_array.sort();",
													"    var encoded_params = params_array.length > 0 ? params_array.join(\"&\") : \"\";",
													"",
													"    var moment = require('moment');",
													"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
													"    pm.collectionVariables.set(\"timestampHeader\", timestamp);",
													"",
													"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params;",
													"",
													"    var CryptoJS = require('crypto-js');",
													"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
													"",
													"    var btoa = require('btoa');",
													"    var authHeader = \"Basic \" + btoa(pm.collectionVariables.get(\"accounts_api_ikey\") + \":\" + hmacDigest);",
													"",
													"    return authHeader;",
													"}",
													"",
													"// 1️⃣ **Get List of Users from the Account**",
													"function fetchUsers() {",
													"    return new Promise((resolve, reject) => {",
													"        const accountId = pm.collectionVariables.get(\"client_account_id\");",
													"        const url = `https://${pm.collectionVariables.get(\"accounts_api_host\")}/admin/v1/users?account_id=${accountId}`;",
													"",
													"        pm.collectionVariables.set(\"hmacAuthHeader\", getAuthHeader('GET', url, {}));",
													"",
													"        pm.sendRequest({",
													"            url: url,",
													"            method: \"GET\",",
													"            header: {",
													"                \"Authorization\": pm.collectionVariables.get(\"hmacAuthHeader\"),",
													"                \"Date\": pm.collectionVariables.get(\"timestampHeader\")",
													"            }",
													"        }, function (err, res) {",
													"            if (err) {",
													"                console.error(\"Error fetching users:\", err);",
													"                return reject(err);",
													"            }",
													"",
													"            if (res.code === 200) {",
													"                let users = res.json().response; // Ensure correct response parsing",
													"                if (!users || users.length === 0) {",
													"                    return reject(\"No users found in the account.\");",
													"                }",
													"",
													"                let user_IDs = users.map(user => ({",
													"                    user_id: user.user_id,",
													"                    username: user.username",
													"                }));",
													"",
													"                pm.collectionVariables.set(\"user_IDs\", JSON.stringify(user_IDs)); // Store user list",
													"                resolve(user_IDs);",
													"            } else {",
													"                console.error(\"Failed to fetch users:\", res);",
													"                reject(\"Failed to fetch users.\");",
													"            }",
													"        });",
													"    });",
													"}",
													"",
													"// 2️⃣ **Assign Users to the Specified Group**",
													"function assignUserToGroup(user) {",
													"    return new Promise((resolve, reject) => {",
													"        const { user_id, username } = user;",
													"        const accountId = pm.collectionVariables.get(\"client_account_id\");",
													"        const groupId = pm.collectionVariables.get(\"group_id\");",
													"        const groupName = pm.collectionVariables.get(\"group_name\");",
													"",
													"        const url = `https://${pm.collectionVariables.get(\"accounts_api_host\")}/admin/v1/users/${encodeURIComponent(user_id)}/groups?account_id=${accountId}&group_id=${encodeURIComponent(groupId)}`;",
													"",
													"        pm.collectionVariables.set(\"hmacAuthHeader\", getAuthHeader('POST', url, {}));",
													"",
													"        pm.sendRequest({",
													"            url: url,",
													"            method: \"POST\",",
													"            header: {",
													"                \"Authorization\": pm.collectionVariables.get(\"hmacAuthHeader\"),",
													"                \"Date\": pm.collectionVariables.get(\"timestampHeader\")",
													"            }",
													"        }, function (err, res) {",
													"            if (err) {",
													"                console.error(`Error assigning ${username} to ${groupName}:`, err);",
													"                return reject(err);",
													"            }",
													"",
													"            if (res.code === 200) {",
													"             //   console.log(`${username} successfully added to ${groupName}.`);",
													"                resolve(username);",
													"            } else {",
													"                console.warn(`Failed to assign ${username} to ${groupName}:`, res);",
													"                reject(`Failed to assign ${username}`);",
													"            }",
													"        });",
													"    });",
													"}",
													"",
													"// 3️⃣ **Main Execution**",
													"(async () => {",
													"    try {",
													"        // Fetch users from the account",
													"        let users = await fetchUsers();",
													"        // console.log(`Fetched ${users.length} users.`);",
													"",
													"        // Assign all users to the group",
													"        let assignmentPromises = users.map(user => assignUserToGroup(user));",
													"",
													"        // Wait for all users to be processed",
													"        let assignedUsers = await Promise.allSettled(assignmentPromises);",
													"",
													"        let successfulAssignments = assignedUsers",
													"            .filter(res => res.status === \"fulfilled\")",
													"            .map(res => capitalizeName(res.value));",
													"",
													"        let failedAssignments = assignedUsers",
													"            .filter(res => res.status === \"rejected\")",
													"            .map(res => res.reason);",
													"",
													"        console.log(`Successfully assigned users to group: ${successfulAssignments.join(\", \")}`);",
													"        if (failedAssignments.length > 0) {",
													"            console.warn(`⚠️ Users that failed assignment: ${failedAssignments.join(\", \")}`);",
													"        }",
													"    } catch (error) {",
													"        console.error(\"🚨 Error in execution:\", error);",
													"    }",
													"})();",
													"",
													"// 🛠 Function to Capitalize First Letter of First & Last Name",
													"function capitalizeName(fullName) {",
													"    return fullName",
													"        .split(\" \")",
													"        .map(word => word.charAt(0).toUpperCase() + word.slice(1))",
													"        .join(\" \");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"disabled": true
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "{{duo_url}}",
											"host": [
												"{{duo_url}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "### Step 3: Configure User Management\n\n1. Define User Details: On the _Variables_ tab of the **DEVWKS-2039** collection, copy the below CSV into the current value column of the `usersCSV` variable.\n    \n\n```\nusername,email\nJohn Smith,john.smith@example.com\nJane Jones,jane.jones@example.com\nAlice Johnson,alice.johnson@example.com\nMichael Brown,michael.brown@example.com\nEmily Davis,emily.davis@example.com\n\n ```"
						},
						{
							"name": "Application Management",
							"item": [
								{
									"name": "Create Integration A (rdp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract the value of the 'name' field",
													"const integrationName = pm.response.json().response.name;",
													"const integrationType = pm.response.json().response.type;",
													"const integrationKey = pm.response.json().response.integration_key;",
													"const secretKey = pm.response.json().response.secret_key;",
													"",
													"pm.collectionVariables.set(\"integration_name_a\", integrationName);",
													"pm.collectionVariables.set(\"integration_key_a\", integrationKey);",
													"pm.collectionVariables.set(\"secret_key_a\", secretKey);",
													"",
													"var newChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"var API_Hostname = pm.collectionVariables.get(\"client_account_id_api_hostname\");",
													"",
													"var scriptOutput = `duo-win-login-4.X.X.exe /S /V\" /qn IKEY=\"${integrationKey}\" SKEY=\"${secretKey}\" HOST=\"${API_Hostname}\" AUTOPUSH=\"#1\" FAILOPEN=\"#0\" ENABLEOFFLINE=\"1\"\"`;",
													"",
													"console.log(`${integrationName} (${integrationType}) created successfully for ${newChildAccount}:${scriptOutput}`);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/integrations?account_id={{client_account_id}}&name=&type=",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"integrations"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												},
												{
													"key": "name",
													"value": "",
													"description": "Required"
												},
												{
													"key": "type",
													"value": "",
													"description": "Required"
												},
												{
													"key": "adminapi_admins",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_info",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_integrations",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_read_log",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_read_resource",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_settings",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_write_resource",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "enroll_policy",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "greeting",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "groups_allowed",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "ip_whitelist",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "ip_whitelist",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "networks_for_api_access",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "notes",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "trusted_device_days",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "self_service_allowed",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "username_normalization_policy",
													"value": "",
													"description": "Optional",
													"disabled": true
												}
											]
										},
										"description": "https://duo.com/docs/adminapi#create-integration"
									},
									"response": []
								},
								{
									"name": "Create Integration B (websdk)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract the value of the 'name' field",
													"const integrationName = pm.response.json().response.name;",
													"const integrationType = pm.response.json().response.type;",
													"const integrationKey = pm.response.json().response.integration_key;",
													"const secretKey = pm.response.json().response.secret_key;",
													"",
													"pm.collectionVariables.set(\"integration_name_b\", integrationName);",
													"pm.collectionVariables.set(\"integration_key_b\", integrationKey);",
													"pm.collectionVariables.set(\"secret_key_b\", secretKey)",
													"",
													"var newChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"var API_Hostname = pm.collectionVariables.get(\"client_api_hostname\");",
													"",
													"console.log(integrationName + \" (\" + integrationType + \") created successfully for \" + newChildAccount + \": IKEY: \" + integrationKey + \" SKEY: \" + secretKey + \" API_Host: \" + API_Hostname);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/integrations?name=&type=&account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"integrations"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Required"
												},
												{
													"key": "type",
													"value": "",
													"description": "Required"
												},
												{
													"key": "adminapi_admins",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_info",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_integrations",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_read_log",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_read_resource",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_settings",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_write_resource",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "enroll_policy",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "greeting",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "groups_allowed",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "ip_whitelist",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "ip_whitelist",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "networks_for_api_access",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "notes",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "trusted_device_days",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "self_service_allowed",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "username_normalization_policy",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "account_id",
													"value": "{{client_account_id}}"
												}
											]
										},
										"description": "https://duo.com/docs/adminapi#create-integration"
									},
									"response": []
								},
								{
									"name": "Create Integrations C (VPN)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract the value of the 'name' field",
													"const integrationName = pm.response.json().response.name;",
													"const integrationType = pm.response.json().response.type;",
													"const integrationKey = pm.response.json().response.integration_key;",
													"const secretKey = pm.response.json().response.secret_key;",
													"",
													"pm.collectionVariables.set(\"integration_name_c\", integrationName);",
													"pm.collectionVariables.set(\"integration_key_c\", integrationKey);",
													"pm.collectionVariables.set(\"secret_key_c\", secretKey);",
													"",
													"var newChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"var API_Hostname = pm.collectionVariables.get(\"client_api_hostname\");",
													"",
													"console.log(`${integrationName} (${integrationType}) created successfully for ${newChildAccount}.Please update your authproxy.cfg file with the following configuration.`);",
													"",
													"var authProxyConfig = `",
													"[ad_client]",
													"host=1.2.3.4",
													"host_2=1.2.3.5",
													"service_account_username=duoservice",
													"service_account_password=password1",
													"search_dn=DC=example,DC=com",
													"",
													"[radius_server_auto]",
													"ikey=${integrationKey}",
													"skey=${secretKey}",
													"api_host=${API_Hostname}",
													"failmode=safe",
													"radius_ip_1=5.6.7.8",
													"radius_secret_1=thisisalsoaradiussecret",
													"client=ad_client",
													"`;",
													"",
													"console.log(authProxyConfig);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v1/integrations?name=&type=&account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v1",
												"integrations"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Required"
												},
												{
													"key": "type",
													"value": "",
													"description": "Required"
												},
												{
													"key": "adminapi_admins",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_info",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_integrations",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_read_log",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_read_resource",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_settings",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "adminapi_write_resource",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "enroll_policy",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "greeting",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "groups_allowed",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "ip_whitelist",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "ip_whitelist",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "networks_for_api_access",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "notes",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "trusted_device_days",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "self_service_allowed",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "username_normalization_policy",
													"value": "",
													"description": "Optional",
													"disabled": true
												},
												{
													"key": "account_id",
													"value": "{{client_account_id}}"
												}
											]
										},
										"description": "https://duo.com/docs/adminapi#create-integration"
									},
									"response": []
								}
							],
							"description": "### Step 5: Configure Application Management\n\nDefine Application Details: On the _Params_ tab of each request in the **Application Management** folder, set the appropriate integration type and integration name based on the below guidance.\n\n- Create Integration A\n    \n    - Name: Duo Authentication for Windows Logon\n        \n    - Type: rdp\n        \n- Create Integration B\n    \n    - Name: Donor Database\n        \n    - Type: websdk\n        \n- Create Integration C\n    \n    - Name: Cisco VPN\n        \n    - Type: ciscoradius"
						},
						{
							"name": "Policy Management",
							"item": [
								{
									"name": "Retrieve Global Policy (Key)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the JSON response",
													"var jsonData = pm.response.json();",
													"",
													"// Check if is_global_policy is true",
													"if (jsonData.response[0].is_global_policy === true) {",
													"    // Set global_policy_key as the policy key",
													"    pm.collectionVariables.set(\"global_policy_key\", jsonData.response[0].policy_key);",
													"}",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										},
										"description": "This request is designed to retrieve the Global Policy policy key to be used in updating the Global Policy in the Update Global Policy request."
									},
									"response": []
								},
								{
									"name": "Update Global Policy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const policyKey = pm.response.json().response.policy_key;",
													"const policyName = pm.response.json().response.policy_name;",
													"// pm.globals.set(\"temp_policy_key\", policyKey);",
													"pm.collectionVariables.set(\"policyName\", policyName);",
													"var ChildAccount= pm.collectionVariables.get(\"client_account_name\", ChildAccount);",
													"console.log(\"Global Policy updated successfully for \" + ChildAccount);",
													"// console.log(\"Policy key assigned to temp_policy_key: \" + policyKey);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"is_global_policy\": true,\n            \"sections\": {\n                \"authentication_methods\": {\n                    \"allowed_auth_list\": [\n                        \"duo-passcode\",\n                        \"duo-push\",\n                        \"hardware-token\",\n                        \"sms\",\n                        \"webauthn-platform\",\n                        \"webauthn-roaming\"\n                    ],\n                    \"auto_retry_sms\": false,\n                    \"blocked_auth_list\": [],\n                    \"require_verified_push\": true,\n                    \"verified_push_digits\": 6\n                },\n                \"authentication_policy\": {\n                    \"user_auth_behavior\": \"enforce\"\n                },\n                \"authorized_networks\": {\n                    \"no_2fa_required\": {\n                        \"ip_list\": [],\n                        \"require_enrollment\": true\n                    }\n                },\n                \"device_health_app\": {\n                    \"prompt_to_install\": [\n                        \"macos\",\n                        \"windows\"\n                    ],\n                    \"requires_DHA\": []\n                },\n                \"new_user\": {\n                    \"new_user_behavior\": \"enroll\"\n                },\n                \"remembered_devices\": {\n                    \"browser_apps\": {\n                        \"enabled\": false\n                    },\n                    \"windows_logon\": {\n                        \"enabled\": false\n                    }\n                },\n                \"trusted_endpoints\": {\n                    \"trusted_endpoint_checking\": \"not-configured\",\n                    \"trusted_endpoint_message\": \"Disabled - To enable the <trusted_endpoints> policy section, you must first configure Trusted Endpoints. (see https://duo.com/docs/trusted-endpoints)\"\n                }\n         }\n}"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{global_policy_key}}?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies",
												"{{global_policy_key}}"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										},
										"description": "Modify the JSON body of the request according to your policy requirements."
									},
									"response": []
								},
								{
									"name": "***Create Policy A (Bypass MFA)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const policyKey = pm.response.json().response.policy_key;",
													"const policyName = pm.response.json().response.policy_name;",
													"pm.collectionVariables.set(\"policy_key_a\", policyKey);",
													"pm.collectionVariables.set(\"policy_name_a\", policyName);",
													"",
													"// Retrieve the values of 'integrationName' and 'ChildAccount' from the global variables",
													"var integrationName = pm.collectionVariables.get(\"integration_name_a\");",
													"var ChildAccount = pm.collectionVariables.get(\"child_account_name\");",
													"",
													"console.log(policyName + \" policy was successfully created\");",
													"// console.log(\"Policy key assigned to temp_policy_key: \" + policyKey);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"policy_name\": \"\",\n    \"sections\": {\n        \"authentication_policy\": {\n            \"user_auth_behavior\": \"\" \n        }\n    }\n    }"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "***Create Policy B (Enforce MFA)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const policyKey = pm.response.json().response.policy_key;",
													"const policyName = pm.response.json().response.policy_name;",
													"pm.collectionVariables.set(\"policy_key_b\", policyKey);",
													"pm.collectionVariables.set(\"policy_name_b\", policyName);",
													"",
													"// Retrieve the values of 'integrationName' and 'ChildAccount' from the global variables",
													"var integrationName = pm.collectionVariables.get(\"integration_name_b\");",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"",
													"console.log(policyName + \" policy was successfully created\");",
													"// console.log(\"Policy key assigned to temp_policy_key: \" + policyKey);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"policy_name\": \"\",\n    \"sections\": {\n        \"authentication_policy\": {\n            \"user_auth_behavior\": \"\" \n        }\n    }\n    }"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply (Bypass MFA) Policy to Integration A",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json().response;",
													"const policyName = responseJson.policy_name;",
													"",
													"",
													"const appName = responseJson.policy_applies_to[0].app_name;",
													"",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"console.log(policyName + \" policy was applied successfully to \" + appName);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"policy_name\": \"{{policy_name_a}}\",\n   \"sections\": {},\n   \"sections_to_delete\": [],\n   \"apply_to_apps\": {\n      \"affect_all_apps\": \"inactive\",\n      \"apply_list\": [\"{{integration_key_a}}\"]\n   }\n}"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_a}}?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies",
												"{{policy_key_a}}"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply (Bypass MFA) Policy to Integration B",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json().response;",
													"const policyName = responseJson.policy_name;",
													"",
													"",
													"const appName = responseJson.policy_applies_to[0].app_name;",
													"",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"console.log(policyName + \" policy was applied successfully to \" + appName);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"policy_name\": \"{{policy_name_a}}\",\n   \"sections\": {},\n   \"sections_to_delete\": [],\n   \"apply_to_apps\": {\n      \"affect_all_apps\": \"inactive\",\n      \"apply_list\": [\"{{integration_key_b}}\"]\n   }\n}"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_a}}?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies",
												"{{policy_key_a}}"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply (Bypass MFA) Policy to Integraion C",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json().response;",
													"const policyName = responseJson.policy_name;",
													"",
													"",
													"const appName = responseJson.policy_applies_to[0].app_name;",
													"",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"console.log(policyName + \" policy was applied successfully to \" + appName);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"policy_name\": \"{{policy_name_a}}\",\n   \"sections\": {},\n   \"sections_to_delete\": [],\n   \"apply_to_apps\": {\n      \"affect_all_apps\": \"inactive\",\n      \"apply_list\": [\"{{integration_key_c}}\"]\n   }\n}"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_a}}?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies",
												"{{policy_key_a}}"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply (Enforce MFA) Policy to Integration A for Group A",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json().response;",
													"const policyName = responseJson.policy_name;",
													"",
													"const appName = responseJson.policy_applies_to[0].app_name;",
													"const groupName = responseJson.policy_applies_to[0].groups[0].group_name;",
													"",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"console.log(policyName + \" policy was applied successfully to \" + appName + \" for the \" + groupName + \" group.\");",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"policy_name\": \"{{policy_name_b}}\",\n   \"sections\": {   },\n   \"sections_to_delete\": [  ],\n   \"apply_to_groups_in_apps\": {\n      \"group_policy_apply_order\": \"existing\",\n      \"apply_group_policies_list\": [\n         {\n            \"app_integration_key\": \"{{integration_key_a}}\",\n            \"group_id_list\": [\"{{group_id}}\"]\n         }\n      ]\n   }\n}\n"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_b}}?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies",
												"{{policy_key_b}}"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply (Enforce MFA) Policy to Integration B for Group A",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json().response;",
													"const policyName = responseJson.policy_name;",
													"",
													"const appName = responseJson.policy_applies_to[0].app_name;",
													"const groupName = responseJson.policy_applies_to[0].groups[0].group_name;",
													"",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"console.log(policyName + \" policy was applied successfully to \" + appName + \" for the \" + groupName + \" group.\");",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"policy_name\": \"{{policy_name_b}}\",\n   \"sections\": {   },\n   \"sections_to_delete\": [  ],\n   \"apply_to_groups_in_apps\": {\n      \"group_policy_apply_order\": \"existing\",\n      \"apply_group_policies_list\": [\n         {\n            \"app_integration_key\": \"{{integration_key_b}}\",\n            \"group_id_list\": [\"{{group_id}}\"]\n         }\n      ]\n   }\n}\n"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_b}}?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies",
												"{{policy_key_b}}"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply (Enforce MFA) Policy to Integration C for Group A",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json().response;",
													"const policyName = responseJson.policy_name;",
													"",
													"const appName = responseJson.policy_applies_to[0].app_name;",
													"const groupName = responseJson.policy_applies_to[0].groups[0].group_name;",
													"",
													"var ChildAccount = pm.collectionVariables.get(\"client_account_name\");",
													"console.log(policyName + \" policy was applied successfully to \" + appName + \" for the \" + groupName + \" group.\");",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{timestampHeader}}"
											},
											{
												"key": "Authorization",
												"value": "{{hmacAuthHeader}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"policy_name\": \"{{policy_name_b}}\",\n   \"sections\": {   },\n   \"sections_to_delete\": [  ],\n   \"apply_to_groups_in_apps\": {\n      \"group_policy_apply_order\": \"existing\",\n      \"apply_group_policies_list\": [\n         {\n            \"app_integration_key\": \"{{integration_key_c}}\",\n            \"group_id_list\": [\"{{group_id}}\"]\n         }\n      ]\n   }\n}\n"
										},
										"url": {
											"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_b}}?account_id={{client_account_id}}",
											"protocol": "https",
											"host": [
												"{{accounts_api_host}}"
											],
											"path": [
												"admin",
												"v2",
												"policies",
												"{{policy_key_b}}"
											],
											"query": [
												{
													"key": "account_id",
													"value": "{{client_account_id}}",
													"description": "DO NOT CHANGE"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "### Step 6: Configure Policy Management\n\n1. Define Policy Details: On the Body tab of the Create Policy A (Bypass MFA) and Create Policy B (Enforce MFA) requests, define the policy details based on the information below.\n    \n\n- Create Policy A\n    \n    - Policy Name: Bypass MFA\n        \n    - User Authentication Behavior: bypass\n        \n- Create Policy B\n    \n    - Policy Name: Enforce MFA\n        \n    - User Authentication Behavior: enforce\n        \n\n##### Refer to the Lab Guide for Steps 7 & 8",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "# Task 2: Onboard a New Duo Customer\n\nA new non-profit organization urgently needs to deploy Duo to secure their enterprise resources. The client has approximately 50 employees and requires robust security for remote and privileged access to their Cisco VPN, Windows endpoints, and a custom web application used to host sensitive donor data. Given the critical nature of their operations and the sensitivity of the data involved, they require this deployment to be completed today to satisfy cyber liability requirements. The client has requested to start with a pilot group of 10 users to ensure a smooth and secure rollout.\n\n## **1\\. Configure Account Details**\n\n**Navigate to the** **DEVWKS-2039** collection >> **Variables**\n\n1. Define the account name:\n    \n    - In the **Current value** column of the `client_account_name` collection variable, enter the account name.\n        \n    - If you are in **seat 2**, name the account `\"DevNet.WS1.Seat2\"`.\n        \n2. Save the changes.\n    \n\n**Navigate to the** **Duo Accounts API w/ Admin API** folder >> **Duo Onboarding** >> **Account & Settings Management** >> **Modify Edition**\n\n1. Set the Duo edition in the **Params** tab:\n    \n    - Choose from **Duo Essentials**, **Duo Advantage**, or **Duo Premier**.\n        \n    - Refer to the **Description** field for correct formatting.\n        \n2. Save the changes. Click the **Send** button to execute the API call.\n    \n\n## **2\\. Configure User and Group Details**\n\nNavigate to the **Duo Admin API** folder >> **User & Group Management** >> **Create Duo Group**\n\n1. Go to the **Params** tab and enter a name for the Duo group.\n    \n    - Example: `Duo Users`.\n        \n    - Note: Avoid special characters.\n        \n2. Save the changes. Click the **Send** button to execute the API call.\n    \n\n**Navigate to the** **DEVWKS-2039** collection >> **Variables**\n\n1. username,emailCaleb Johnson,caleb.johnson@example.comAva Richardson,ava.richardson@example.comMason Bennett,mason.bennett@example.comIsabella Hayes,isabella.hayes@example.comLucas Reed,lucas.reed@example.comHarper Foster,harper.foster@example.comElijah Brooks,elijah.brooks@example.comLily Sanders,lily.sanders@example.comBenjamin Ross,benjamin.ross@example.comCharlotte Gray,charlotte.gray@example.com\n    \n2. Save the changes.\n    \n\n## **3\\. Configure Application Details**\n\nNavigate to the **Duo Admin API** folder >> **Application Management**\n\n1. On the **Params** tab of each request, define the application **Name** and **Type** as outlined below:\n    \n\n- **Create Integration A**\n    \n    - **Name**: `Duo Authentication for Windows Logon`\n        \n    - **Type**: `rdp`\n        \n- **Create Integration B**\n    \n    - **Name**: `Donor Database`\n        \n    - **Type**: `websdk`\n        \n- **Create Integration C**\n    \n    - **Name**: `Cisco VPN`\n        \n    - **Type**: `ciscoradius`\n        \n\n1. Save the changes. Click the **Send** button to execute each API call.\n    \n\n## **4\\. Configure Policy Details**\n\nNavigate to the **Duo Admin API** folder >> **Policy Management**\n\n1. On the **Body** tab of the **Create Policy A** and **Create Policy B** requests, define the policy details as outlined below:\n    \n\n- **Create Policy A**\n    \n    - **Policy Name**: `Bypass MFA`\n        \n    - **User Authentication Behavior**: `bypass`\n        \n- **Create Policy B**\n    \n    - **Policy Name**: `Enforce MFA`\n        \n    - **User Authentication Behavior**: `enforce`\n        \n\n1. Save the changes. Click the **Send** button to execute each API call.\n    \n\nClick to expand policy JSON if needed or continue to next step\n\n## **5\\. Deploy the New Duo Customer**\n\nNavigate to the **Duo Admin API** folder >> **Duo Onboarding**\n\n1. Hover over the **Duo Onboarding** folder. Click the three dots (**...**) to expand the menu, then select **Run Folder**.\n    \n2. In the **Collection Runner**, click the **Run DEVWKS-2039** button.\n    \n\n## **6\\. Verify the Deployment (Optional)**\n\nNavigate to the **Duo Admin API** folder >> **Account Management** >> **Retrieve Accounts**\n\n1. Click the **Send** button to execute the request.\n    \n2. Verify that the Duo account you created appears in the list of child accounts.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Tested on Postman 7.8",
									"",
									"// Variable declaration",
									"// Require 'url' module to use its methods for handling and transforming URLs.",
									"var URL = require('url');",
									"",
									"// Get the hostname for the accounts API from Postman collection variables.",
									"var hostname = pm.collectionVariables.get(\"accounts_api_host\");",
									"",
									"// Declare a variable to hold Duo Authentication Version",
									"var duo_auth_ver;",
									"",
									"// Retrieve the request url",
									"var req_url = pm.request.url.toString();",
									"",
									"// Account Iteration Block",
									"(function() {",
									"    var accountNames = pm.collectionVariables.get(\"client_account_name\");",
									"",
									"    // Check if accountNames is a string, if so, convert it to an array",
									"    if (typeof accountNames === 'string') {",
									"        try {",
									"            accountNames = JSON.parse(accountNames);",
									"        } catch (e) {",
									"            accountNames = [accountNames];",
									"        }",
									"    }",
									"",
									"    var currentIteration = pm.info.iteration;",
									"    if (currentIteration < accountNames.length) {",
									"        var currentAccount = accountNames[currentIteration];",
									"        pm.collectionVariables.get(\"client_account_name\", currentAccount);",
									"    } else {",
									"        pm.collectionVariables.get(\"client_account_name\", \"\");",
									"    }",
									"})();",
									"",
									"function urlEncodeParams(value, index, array) {",
									"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"}",
									"",
									"function replaceAllVariables(str) {",
									"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;",
									"    return str.replace(variableRegex, function(match, variableName) {",
									"        return pm.variables.get(variableName);",
									"    });",
									"}",
									"",
									"function replaceVariables(baseVar, str) {",
									"    for (let i = 97; i <= 122; i++) { // ASCII values for 'a' to 'z'",
									"        let alphabet = String.fromCharCode(i);",
									"        let fullVariable = '{{' + baseVar + alphabet + '}}';",
									"        let variableValue = pm.collectionVariables.get(baseVar + alphabet);",
									"",
									"        if (variableValue) {",
									"            str = str.replace(new RegExp(fullVariable, 'g'), variableValue);",
									"        }",
									"    }",
									"    return str;",
									"}",
									"",
									"function getAuthHeader(httpMethod, hostname, path, q_str, requestBody, duo_auth_ver) {",
									"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\");",
									"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\");",
									"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\");",
									"",
									"    q_str = decodeURIComponent(q_str);",
									"    var api_call = path;",
									"",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.collectionVariables.set(\"timestampHeader\", timestamp);",
									"",
									"    var AUTH_TYPE;",
									"    var hmacDigest;",
									"",
									"    switch (duo_auth_ver) {",
									"        case 'v2':",
									"            AUTH_TYPE = 'HMAC-SHA1';",
									"            var params_unsorted = \"\";",
									"            var params_array = [];",
									"            if (Object.keys(requestBody).length !== 0) {",
									"                for (var parameter in requestBody) {",
									"                    params_unsorted = parameter + \"=\" + requestBody[parameter];",
									"                    params_array.push(params_unsorted);",
									"                }",
									"            } else {",
									"                params_unsorted = q_str;",
									"                if (q_str) {",
									"                    params_array = params_unsorted.split(\"&\");",
									"                }",
									"            }",
									"            params_array.sort();",
									"            var encoded_params = \"\";",
									"            if (params_array[0] !== \"\") {",
									"                var encoded_params_array = params_array.map(urlEncodeParams);",
									"                encoded_params = encoded_params_array.join(\"&\");",
									"            }",
									"            var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params;",
									"            // console.log(requestData);",
									"            var CryptoJS = require('crypto-js');",
									"            hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"            pm.request.headers.add({key: 'Content-Type', value: 'application/x-www-form-urlencoded'})",
									"            break;",
									"        case 'v5':",
									"            AUTH_TYPE = 'HMAC-SHA512';",
									"            var body_length = Object.keys(requestBody).length;",
									"            var encoded_params = \"\";",
									"            var requestData = \"\";",
									"            if (body_length != 0) {",
									"                var jsonData = JSON.parse(pm.request.body.toJSON().raw);",
									"                var jsonDataString = JSON.stringify(jsonData);",
									"                jsonDataString = replaceAllVariables(jsonDataString);",
									"                jsonData = JSON.parse(jsonDataString);",
									"                params_unsorted = q_str;",
									"                if (params_unsorted.length > 0) {",
									"                    params_array = params_unsorted.split(\"&\");",
									"                    params_array.sort();",
									"                    var encoded_params_array = params_array.map(urlEncodeParams);",
									"                    encoded_params = encoded_params_array.join(\"&\");",
									"                }",
									"                var CryptoJS = require('crypto-js');",
									"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");",
									"                pm.request.body.update(jsonDataString);",
									"            } else {",
									"                params_unsorted = q_str;",
									"                if (params_unsorted.length > 0) {",
									"                    params_array = params_unsorted.split(\"&\");",
									"                    params_array.sort();",
									"                    var encoded_params_array = params_array.map(urlEncodeParams);",
									"                    encoded_params = encoded_params_array.join(\"&\");",
									"                }",
									"                var CryptoJS = require('crypto-js');",
									"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");",
									"                // console.log(requestData);",
									"            }",
									"            ",
									"            var CryptoJS = require('crypto-js');",
									"            hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
									"            pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
									"            break;",
									"    }",
									"",
									"    var prebase = IKEY + \":\" + hmacDigest;",
									"    var btoa = require('btoa');",
									"    var baseComplete = btoa(prebase);",
									"    var authHeader = \"Basic \" + baseComplete;",
									"    return authHeader;",
									"}",
									"",
									"// Base variable names",
									"var baseVariables = ['integration_name_', 'integration_key_', 'secret_key_', 'policy_name_', 'policy_key_', 'group_id', 'group_name'];",
									"",
									"// Replace variables in req_url and path",
									"baseVariables.forEach(function(baseVar) {",
									"    req_url = replaceVariables(baseVar, req_url);",
									"});",
									"",
									"if (req_url.includes('/v1/')) {",
									"    duo_auth_ver = 'v2';",
									"} else if (req_url.includes('/v2/')) {",
									"    duo_auth_ver = 'v5';",
									"}",
									"",
									"if (req_url.includes('{{client_account_id}}')) {",
									"    var account_id = pm.collectionVariables.get('client_account_id');",
									"    req_url = req_url.replace('{{client_account_id}}', account_id);",
									"}",
									"",
									"if (req_url.includes('{{child_account_name}}')) {",
									"    var child_account_name = pm.collectionVariables.get('child_account_name');",
									"    req_url = req_url.replace(/{{child_account_name}}/g, child_account_name);",
									"}",
									"",
									"if (req_url.includes('{{client_account_name}}')) {",
									"    var client_account_name = pm.collectionVariables.get('client_account_name');",
									"    req_url = req_url.replace(/{{client_account_name}}/g, client_account_name);",
									"}",
									"",
									"if (req_url.includes('{{username}}')) {",
									"    var username = pm.globals.get('username');",
									"    req_url = req_url.replace(/{{username}}/g, username);",
									"}",
									"",
									"if (req_url.includes('{{email}}')) {",
									"    var email = pm.globals.get('email');",
									"    req_url = req_url.replace(/{{email}}/g, email);",
									"}",
									"",
									"if (req_url.includes('{{next_offset}}')) {",
									"    var next_offset = pm.globals.get('next_offset');",
									"    req_url = req_url.replace(/{{next_offset}}/g, next_offset);",
									"}",
									"",
									"// Parse the query string from the request url",
									"var q_str = URL.parse(req_url).query;",
									"if (q_str == null) {",
									"    q_str = \"\";",
									"}",
									"",
									"// Parse the path from the request url, remove the leading '/', then rejoin the path",
									"var path = decodeURIComponent(URL.parse(req_url).pathname).split(\"/\");",
									"path = path.slice(1);",
									"path = path.join('/');",
									"path = '/' + path;",
									"",
									"// Replace variables in path",
									"baseVariables.forEach(function(baseVar) {",
									"    path = replaceVariables(baseVar, path);",
									"});",
									"",
									"if (path.includes('{{user_id}}')) {",
									"    var user_id = pm.globals.get('user_id');",
									"    path = path.replace('{{user_id}}', user_id);",
									"}",
									"",
									"if (path.includes('{{global_policy_key}}')) {",
									"    var global_policy_key = pm.collectionVariables.get('global_policy_key');",
									"    path = path.replace('{{global_policy_key}}', global_policy_key);",
									"}",
									"",
									"if (path.includes('{{group_id}}')) {",
									"    var group_id = pm.collectionVariables.get('group_id');",
									"    path = path.replace('{{group_id}}', group_id);",
									"}",
									"",
									"// Set the authentication header",
									"var authHeader = getAuthHeader(pm.request.method, hostname, path, q_str, pm.request.body, duo_auth_ver);",
									"pm.collectionVariables.set(\"hmacAuthHeader\", authHeader);",
									"",
									"// Ensure only one Content-Type header is set",
									"pm.request.headers.remove('Content-Type');",
									"pm.request.headers.upsert({key: 'Content-Type', value: 'application/json'});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Account Management",
					"item": [
						{
							"name": "Retrieve Accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response as JSON",
											"var responseJson = pm.response.json();",
											"",
											"// Initialize an object to store the mapping",
											"var duoChildAccounts = {};",
											"",
											"for (var i = 0; i < responseJson.response.length; i++) {",
											"    var accountId = responseJson.response[i].account_id;",
											"    var accountName = responseJson.response[i].name;",
											"    var apiHostname = responseJson.response[i].api_hostname;",
											"    ",
											"    // Store the account ID, name, and API hostname in duoChildAccounts",
											"    duoChildAccounts[accountId] = {",
											"        name: accountName,",
											"        apiHostname: apiHostname",
											"    };",
											"}",
											"",
											"// Save the mapping object as a global variable",
											"pm.collectionVariables.set(\"duoChildAccounts\", JSON.stringify(duoChildAccounts));",
											"",
											"// Check the status code of the response",
											"var statusCode = responseJson.stat;",
											"",
											"if (statusCode === \"OK\") {",
											" console.log(\"Duo Child Accounts Retrieved Successfully\");",
											"    Object.keys(duoChildAccounts).forEach(accountId => {",
											"        var accountInfo = duoChildAccounts[accountId];",
											"        console.log(`Account Name: ${accountInfo.name}, Account ID: ${accountId}, API Hostname: ${accountInfo.apiHostname}`);",
											"    });",
											"        console.log(`Total Accounts: ${Object.keys(duoChildAccounts).length}`);",
											"} else {",
											"    console.log(\"Failed to save Account ID to Name and API Hostname mapping to the 'duoChildAccounts' global variable.\");",
											"}",
											"",
											"",
											"// Remove the 'timestampHeader' global variable",
											"pm.globals.unset(\"timestampHeader\");",
											"",
											"// Remove the 'hmacAuthHeader' global variable",
											"pm.globals.unset(\"hmacAuthHeader\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{accounts_api_host}}/accounts/v1/account/list",
									"protocol": "https",
									"host": [
										"{{accounts_api_host}}"
									],
									"path": [
										"accounts",
										"v1",
										"account",
										"list"
									]
								},
								"description": "Returns a list of child accounts."
							},
							"response": []
						}
					],
					"description": "This collection is designed to interact with the [Duo Accounts API](https://duo.com/docs/accountsapi). The Accounts API allows a Duo parent account administrator to create, manage, and delete Duo child accounts.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"//Generate the authorization header",
									"    function getAuthHeader(httpMethod, requestUrl, requestBody) {",
									"    // Ensure requestUrl is a string",
									"    requestUrl = String(requestUrl);",
									"",
									"    // Retrieve Accounts API IKEY, SKEY and API Hostname",
									"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); ",
									"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); ",
									"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\"); ",
									"",
									"    // Check if API_HOSTNAME is defined",
									"    if (!API_HOSTNAME) {",
									"        throw new Error(\"API_HOSTNAME is not defined\");",
									"    }",
									"",
									"    // Add a '?' to the end of the URL if it doesn't exist",
									"    if (requestUrl.indexOf(\"?\") === -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"",
									"    // Calculate the starting point of the query parameters in the URL",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"",
									"    // Calculate the length of the hostname",
									"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
									"",
									"    // Extract the Duo API endpoint",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
									"    api_call = api_call.replace(\"}}\", \"\");",
									"",
									"    var params_unsorted = \"\";",
									"    var params_array = [];",
									"",
									"    // Depending on the HTTP method, extract parameters from URL or body",
									"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
									"        for (var parameter1 in requestBody) {",
									"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
									"            params_array.push(params_unsorted);",
									"        }",
									"    } else {",
									"        params_unsorted = requestUrl.substring(paramsStart+1);",
									"        params_array = params_unsorted.split(\"&\");",
									"    }",
									"",
									"    // Sort parameters lexicographically by key",
									"    params_array.sort();                    ",
									"    var encoded_params = \"\";",
									"",
									"    // If there are parameters, encode and join them",
									"    if (params_array[0] !== \"\"){",
									"        var encoded_params_array = params_array.map(urlEncodeParams);  ",
									"        encoded_params = encoded_params_array.join(\"&\");",
									"    }",
									"",
									"    // Get the current timestamp in the RFC 2822 format",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.collectionVariables.set(\"timestampHeader\",timestamp);",
									" ",
									"    // Construct the string to be signed",
									"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
									" ",
									"    // Compute the HMAC-SHA1 signature",
									"    var CryptoJS = require('crypto-js');",
									"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"     ",
									"    // Construct the Auth header",
									"    var btoa = require('btoa');",
									"    var prebase = IKEY+\":\"+ hmacDigest;",
									"    var baseComplete = btoa(prebase);",
									"    var authHeader = \"Basic \"+ baseComplete;",
									"",
									"    return authHeader;",
									"}",
									"",
									"// URL encode parameters",
									"    function urlEncodeParams(value, index, array) {",
									"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"}",
									"",
									"// Set the authorization header",
									"    pm.collectionVariables.set(\"hmacAuthHeader\", getAuthHeader(pm.request.method, pm.request.url, pm.request.body))",
									";",
									"",
									"// Add the request headers",
									"    pm.request.headers.add({key: 'Date', value: \"{{timestampHeader}}\" });",
									"    pm.request.headers.add({key: 'Authorization', value: \"{{hmacAuthHeader}}\" });",
									"    pm.request.headers.add({key: 'Content-Type', value: 'application/x-www-form-urlencoded' ",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bypass Users",
					"item": [
						{
							"name": "Users in Bypass",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Initialize DuoChildAccounts as an empty object\r",
											"var DuoChildAccounts = {};\r",
											"\r",
											"// HMAC 1 - Get HMAC authentication header\r",
											"function getAuthHeader(httpMethod, requestUrl, requestBody) {\r",
											"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); //Auth or Admin API IKEY\r",
											"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); //Auth or Admin API SKEY\r",
											"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\"); //Auth or Admin API Hostname\r",
											"    var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type\r",
											"\r",
											"    // Check if the API hostname is defined. If not, throw an error.\r",
											"    if (!API_HOSTNAME) {\r",
											"        throw new Error(\"API_HOSTNAME is not defined\");\r",
											"    }\r",
											"     \r",
											"    //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call\r",
											"    if (requestUrl.indexOf(\"?\") == -1) {\r",
											"        requestUrl += \"?\";\r",
											"    }\r",
											"\r",
											"    // Get the index of the start of the query parameters in the URL \r",
											"    var paramsStart = requestUrl.indexOf(\"?\");\r",
											"\r",
											"    // Calculate the length of the hostname\r",
											"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;\r",
											"\r",
											"    // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters\r",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call\r",
											"     \r",
											"    // Clean up api_call by removing any unwanted characters\r",
											"    api_call = api_call.replace(\"}}\", \"\");\r",
											"    // console.log('api_call:', api_call);\r",
											"\r",
											"    var params_unsorted = \"\";\r",
											"    var params_array = [];\r",
											"    //Create unsorted array of parameters from either URL or Body\r",
											"    //Assuming POST parameters are in the Body, GET paramters are in URL\r",
											"    //(technically it looks like POST can be in the URL as well)\r",
											"\r",
											"    // Depending on the HTTP method and the existence of a request body,\r",
											"    // extract the query parameters from the URL or the body into params_array\r",
											"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {\r",
											"        for (var parameter1 in requestBody) {\r",
											"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
											"            params_array.push(params_unsorted);\r",
											"        }\r",
											"    } else {\r",
											"        params_unsorted = requestUrl.substring(paramsStart+1);\r",
											"        params_array = params_unsorted.split(\"&\");\r",
											"    }\r",
											"     \r",
											"    params_array.sort();                    //lexicographically sort parameters by key\r",
											"    var encoded_params = \"\";               \r",
											"    if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from\r",
											"        var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array\r",
											"        encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &\r",
											"    }\r",
											"     \r",
											"    // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use\r",
											"    var moment = require('moment');\r",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
											"    pm.collectionVariables.set(\"timestampHeader\",timestamp);\r",
											" \r",
											"    // Construct the canonical string that is to be signed, by concatenating several request elements with newlines\r",
											"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;\r",
											"    // console.log(requestData);\r",
											" \r",
											"    // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key\r",
											"    var CryptoJS = require('crypto-js');\r",
											"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
											"     \r",
											"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.\r",
											"    var prebase = IKEY+\":\"+ hmacDigest;\r",
											"    // console.log(\"prebase:\", prebase)\r",
											"     \r",
											"    //encodes a string in base-64\r",
											"    var btoa = require('btoa');\r",
											"    var baseComplete = btoa(prebase);\r",
											"\r",
											"    var authHeader = \"Basic \"+ baseComplete;\r",
											"    return authHeader;\r",
											"}\r",
											"\r",
											"// HMAC 2 - Get HMAC authentication header\r",
											"function getAuthHeader2(httpMethod, requestUrl, requestBody, apiHostname) {\r",
											"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
											"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
											"    var AUTH_TYPE = 'HMAC-SHA1';\r",
											"\r",
											"    if (requestUrl.indexOf(\"?\") == -1) {\r",
											"        requestUrl += \"?\";\r",
											"    }\r",
											"\r",
											"    var paramsStart = requestUrl.indexOf(\"?\");\r",
											"    var hostname_length = apiHostname.length + 8;\r",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
											"\r",
											"    var params_unsorted = \"\";\r",
											"    var params_array = [];\r",
											"\r",
											"    if (Object.keys(requestBody).length !== 0) {\r",
											"        for (var parameter1 in requestBody) {\r",
											"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
											"            params_array.push(params_unsorted);\r",
											"        }\r",
											"    } else {\r",
											"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
											"        params_array = params_unsorted.split(\"&\");\r",
											"    }\r",
											"\r",
											"    params_array.sort();\r",
											"    var encoded_params = \"\";\r",
											"    if (params_array[0] !== \"\") {\r",
											"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
											"        encoded_params = encoded_params_array.join(\"&\");\r",
											"    }\r",
											"\r",
											"    var moment = require('moment');\r",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
											"    pm.collectionVariables.set(\"timestampHeader\", timestamp);\r",
											"\r",
											"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
											"    var CryptoJS = require('crypto-js');\r",
											"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
											"    var prebase = IKEY + \":\" + hmacDigest;\r",
											"    var baseComplete = btoa(prebase);\r",
											"    var authHeader = \"Basic \" + baseComplete;\r",
											"    return authHeader;\r",
											"}\r",
											"\r",
											"function urlEncodeParams(value, index, array) {\r",
											"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
											"}\r",
											"\r",
											"// Request 1 - Get Accounts\r",
											"function getAccounts() {\r",
											"    var url1 = `https://${pm.collectionVariables.get(\"accounts_api_host\")}/accounts/v1/account/list`;\r",
											"    pm.collectionVariables.set(\"hmacAuthHeader\", getAuthHeader(\"POST\", url1, {}));\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
											"            \"Authorization\": pm.collectionVariables.get(\"hmacAuthHeader\"),\r",
											"            \"Date\": pm.collectionVariables.get(\"timestampHeader\")\r",
											"        },\r",
											"        body: {}\r",
											"    }, function(err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        try {\r",
											"            var responseJson = JSON.parse(res.text());\r",
											"            if (responseJson.stat === \"OK\") {\r",
											"                var DuoChildAccounts = {};\r",
											"                responseJson.response.forEach(account => {\r",
											"                    DuoChildAccounts[account.account_id] = {\r",
											"                        name: account.name,\r",
											"                        apiHostname: account.api_hostname\r",
											"                    };\r",
											"                });\r",
											"\r",
											"                // Save the mapping object as a global variable\r",
											"                pm.collectionVariables.set(\"duoChildAccounts\", JSON.stringify(DuoChildAccounts));\r",
											"\r",
											"                // Proceed to the next request\r",
											"                getBypassUsers(DuoChildAccounts);\r",
											"            } else {\r",
											"                console.log(\"Unexpected 'stat' value:\", responseJson.stat);\r",
											"            }\r",
											"        } catch (error) {\r",
											"            console.log(\"Error parsing JSON:\", error);\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"// Clear Global Variables\r",
											"function clearGlobalVariables() {\r",
											"    pm.collectionVariables.unset(\"timestampHeader\");\r",
											"    pm.collectionVariables.unset(\"hmacAuthHeader\");\r",
											"    pm.collectionVariables.unset(\"hmacAuthHeader2\");\r",
											"    pm.collectionVariables.unset(\"accountId\");\r",
											"    pm.collectionVariables.unset(\"next_offset\");\r",
											"}\r",
											"\r",
											"// Request 2 - Get Bypass Users\r",
											"function getBypassUsers(DuoChildAccounts) {\r",
											"    var bypassUserList = {};\r",
											"    var keys = Object.keys(DuoChildAccounts);\r",
											"    processAccount(keys, 0);\r",
											"\r",
											"    function processAccount(keys, index, offset = 0) {\r",
											"        if (index >= keys.length) {\r",
											"            // All accounts have been processed\r",
											"            console.log(\"================== Duo Bypass Users ==================\");\r",
											"            let bypassUserFound = false;\r",
											"            for (let accountId in bypassUserList) {\r",
											"                let accountData = bypassUserList[accountId];\r",
											"                if (accountData.users.length > 0) {\r",
											"                    bypassUserFound = true;\r",
											"                    // console.log(\"Account Name\\t\\tBypass Users\");\r",
											"                    // console.log(\"================== Duo Bypass Users ==================\");\r",
											"                   console.log(`${accountData.account_name}: ${accountData.users.map(user => user.username).join(\", \")}`);\r",
											"                }\r",
											"            }\r",
											"\r",
											"            if (!bypassUserFound) {\r",
											"                console.log(\"There are no users in Bypass status across your client accounts.\");\r",
											"                // No need to set bypassUserList as a global variable if no users found\r",
											"            } else {\r",
											"                pm.collectionVariables.set(\"bypassUserList\", JSON.stringify(bypassUserList));\r",
											"            }\r",
											"\r",
											"            clearGlobalVariables(); // Clear global variables after processing\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        let accountId = keys[index];\r",
											"        var accountDetails = DuoChildAccounts[accountId];\r",
											"        var urlWithAccountId = `https://${accountDetails.apiHostname}/admin/v1/users?account_id=${accountId}&offset=${offset}`;\r",
											"\r",
											"        pm.collectionVariables.set(\"hmacAuthHeader2\", getAuthHeader2(\"GET\", urlWithAccountId, {}, accountDetails.apiHostname));\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: urlWithAccountId,\r",
											"            method: \"GET\",\r",
											"            header: {\r",
											"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
											"                \"Authorization\": pm.collectionVariables.get(\"hmacAuthHeader2\"),\r",
											"                \"Date\": pm.collectionVariables.get(\"timestampHeader\")\r",
											"            },\r",
											"            body: {}\r",
											"        }, function(err, res) {\r",
											"            if (err) {\r",
											"                console.error('Request failed for account:', accountDetails.name, '; Error:', err);\r",
											"                processAccount(keys, index + 1);\r",
											"                return;\r",
											"            }\r",
											"\r",
											"            if (res.code === 200) {\r",
											"                var resJson = res.json();\r",
											"                var bypassUsers = resJson.response.filter(user => user.status === 'bypass')\r",
											"                    .map(user => ({ username: user.username, user_id: user.user_id }));\r",
											"\r",
											"                if (bypassUsers.length > 0) {\r",
											"                    if (!bypassUserList[accountId]) {\r",
											"                        bypassUserList[accountId] = {\r",
											"                            account_name: accountDetails.name,\r",
											"                            users: []\r",
											"                        };\r",
											"                    }\r",
											"                    bypassUserList[accountId].users.push(...bypassUsers);\r",
											"                }\r",
											"\r",
											"                // Check for next offset\r",
											"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
											"                    processAccount(keys, index, resJson.metadata.next_offset);\r",
											"                } else {\r",
											"                    processAccount(keys, index + 1);\r",
											"                }\r",
											"            } else {\r",
											"                console.error('Request failed for account:', accountDetails.name, '; Response:', res);\r",
											"                processAccount(keys, index + 1);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Start the process\r",
											"getAccounts();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Date",
										"value": "{{timestampHeader}}"
									},
									{
										"key": "Authorization",
										"value": "{{hmacAuthHeader}}"
									}
								],
								"url": {
									"raw": "{{duo_url}}",
									"host": [
										"{{duo_url}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
							},
							"response": []
						},
						{
							"name": "Set Users to Active",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// // Variables declaration section\r",
											"// var bypassUserListString = pm.collectionVariables.get(\"bypassUserList\");\r",
											"// var bypassUserList;\r",
											"// var DuoChildAccounts;\r",
											"\r",
											"// try {\r",
											"//     bypassUserList = JSON.parse(bypassUserListString);\r",
											"//     DuoChildAccounts = JSON.parse(pm.collectionVariables.get(\"duoChildAccounts\"));\r",
											"// } catch (e) {\r",
											"//     console.error(\"Error parsing JSON: \", e);\r",
											"//     return; // Stop execution if parsing fails\r",
											"// }\r",
											"\r",
											"// // Check if bypassUserList is empty\r",
											"// if (!bypassUserList || Object.keys(bypassUserList).length === 0) {\r",
											"//     console.log(\"bypassUserList is empty or not defined.\");\r",
											"//     clearGlobalVariables(); // Clear global variables\r",
											"//     return; // Exit if there's nothing to process\r",
											"// }\r",
											"\r",
											"// function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
											"//     var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); //Accounts API IKEY\r",
											"//     var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); //Accounts API SKEY\r",
											"\r",
											"//     if (requestUrl.indexOf(\"?\") == -1) {\r",
											"//         requestUrl += \"?\";\r",
											"//     }\r",
											"\r",
											"//     var paramsStart = requestUrl.indexOf(\"?\");\r",
											"//     var hostname_length = apiHostname.length + 8;\r",
											"//     var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
											"\r",
											"//     var params_unsorted = \"\";\r",
											"//     var params_array = [];\r",
											"\r",
											"//     // Ensure requestBody is an object\r",
											"//     if (!requestBody || Object.keys(requestBody).length === 0) {\r",
											"//         requestBody = {};\r",
											"//     }\r",
											"\r",
											"//     for (var parameter1 in requestBody) {\r",
											"//         params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
											"//         params_array.push(params_unsorted);\r",
											"//     }\r",
											"\r",
											"//     if (params_array.length === 0) {\r",
											"//         params_unsorted = requestUrl.substring(paramsStart + 1);\r",
											"//         params_array = params_unsorted.split(\"&\");\r",
											"//     }\r",
											"\r",
											"//     params_array.sort();\r",
											"//     var encoded_params = \"\";\r",
											"//     if (params_array[0] !== \"\") {\r",
											"//         var encoded_params_array = params_array.map(urlEncodeParams);\r",
											"//         encoded_params = encoded_params_array.join(\"&\");\r",
											"//     }\r",
											"\r",
											"//     var moment = require('moment');\r",
											"//     var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
											"//     pm.collectionVariables.set(\"timestampHeader\", timestamp);\r",
											"\r",
											"//     var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
											"//     var CryptoJS = require('crypto-js');\r",
											"//     var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
											"\r",
											"//     var prebase = IKEY + \":\" + hmacDigest;\r",
											"//     var btoa = require('btoa');\r",
											"//     var baseComplete = btoa(prebase);\r",
											"\r",
											"//     var authHeader = \"Basic \" + baseComplete;\r",
											"//     return authHeader;\r",
											"// }\r",
											"\r",
											"// function urlEncodeParams(value, index, array) {\r",
											"//     return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
											"// }\r",
											"\r",
											"// // Loop over each Account in the bypassUserList\r",
											"// for (let accountKey in bypassUserList) {\r",
											"//     let accountData = bypassUserList[accountKey];\r",
											"//     let accountId;\r",
											"//     let accountDetails;\r",
											"\r",
											"//     // Check if accountKey is a valid JSON string\r",
											"//     try {\r",
											"//         let parsedKey = JSON.parse(accountKey);\r",
											"//         accountId = parsedKey.account_id;\r",
											"//     } catch (e) {\r",
											"//         // If it's not a valid JSON, use accountKey directly\r",
											"//         accountId = accountKey;\r",
											"//     }\r",
											"\r",
											"//     accountDetails = DuoChildAccounts[accountId];\r",
											"//     if (!accountDetails) {\r",
											"//         console.error(\"Account details not found for account ID: \", accountId);\r",
											"//         continue;\r",
											"//     }\r",
											"\r",
											"//     let accountName = accountDetails.name;\r",
											"//     let apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
											"\r",
											"//     let processedUsers = []; // Array to hold processed usernames\r",
											"//     let userPromises = []; // Array to hold promises\r",
											"\r",
											"//     if (Array.isArray(accountData.users)) {\r",
											"//         accountData.users.forEach(function(user) {\r",
											"//             // Construct the URL for the API call, using the current accountId, user_id, and specific apiHostname\r",
											"//             var postUrlWithAccountIdAndUserId = `https://${apiHostname}/admin/v1/users/${user.user_id}?account_id=${accountId}&status=active`;\r",
											"\r",
											"//             // Call the getAuthHeader function to generate the HMAC auth header for this API request\r",
											"//             var postHmacAuthHeader = getAuthHeader(\"POST\", postUrlWithAccountIdAndUserId, {}, apiHostname);\r",
											"\r",
											"//             // Create a new promise for each request\r",
											"//             let userPromise = new Promise((resolve, reject) => {\r",
											"//                 pm.sendRequest({\r",
											"//                     url: postUrlWithAccountIdAndUserId,\r",
											"//                     method: \"POST\",\r",
											"//                     header: {\r",
											"//                         \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
											"//                         \"Authorization\": postHmacAuthHeader,\r",
											"//                         \"Date\": pm.collectionVariables.get(\"timestampHeader\")\r",
											"//                     },\r",
											"//                     body: {}\r",
											"//                 }, function(postErr, postRes) {\r",
											"//                     if (postRes.code === 200 && postRes.json().stat === \"OK\") {\r",
											"//                         processedUsers.push(user.username); // Add username to the array\r",
											"//                         resolve();\r",
											"//                     } else {\r",
											"//                         console.error(\"There was an error when processing user with ID: \" + user.user_id);\r",
											"//                         console.error(postErr);\r",
											"//                         reject();\r",
											"//                     }\r",
											"//                 });\r",
											"//             });\r",
											"\r",
											"//             userPromises.push(userPromise);\r",
											"//         });\r",
											"\r",
											"//         // Wait for all promises to resolve\r",
											"//         Promise.all(userPromises).then(() => {\r",
											"//             if (processedUsers.length > 0) {\r",
											"//                 console.log(\"The following users have been set to Active status on \" + accountName + \": \" + processedUsers.join(\", \"));\r",
											"//             }\r",
											"//         }).catch((error) => {\r",
											"//             console.error(\"Error in processing users for account:\", accountName, \"; Error:\", error);\r",
											"//         });\r",
											"//     } else {\r",
											"//         console.error(\"Users is not an array for account:\", accountName);\r",
											"//     }\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"// // Get the last account data and user\r",
											"// var lastAccountKeyString = Object.keys(bypassUserList).pop();\r",
											"\r",
											"// if (lastAccountKeyString) {\r",
											"//     var lastAccountData = bypassUserList[lastAccountKeyString];\r",
											"//     var lastAccountDetails = DuoChildAccounts[lastAccountKeyString]; // Directly use lastAccountKeyString\r",
											"\r",
											"//     if (lastAccountData && Array.isArray(lastAccountData.users) && lastAccountData.users.length > 0) {\r",
											"//         var lastUser = lastAccountData.users[lastAccountData.users.length - 1];\r",
											"//         var lastUserApiHostname = lastAccountDetails.apiHostname; // Use lastAccountDetails\r",
											"\r",
											"//         // Set the global variables\r",
											"//         pm.collectionVariables.set(\"user_id\", lastUser.user_id);\r",
											"//         pm.collectionVariables.set(\"account_id\", lastAccountKeyString); // Use lastAccountKeyString directly\r",
											"\r",
											"//         // Construct the URL for the API call\r",
											"//         var mainUrlWithAccountIdAndUserId = `https://${lastUserApiHostname}/admin/v1/users/${lastUser.user_id}?account_id=${lastAccountKeyString}&status=active`;\r",
											"\r",
											"//         // Call the getAuthHeader function\r",
											"//         var mainHmacAuthHeader = getAuthHeader(\"POST\", mainUrlWithAccountIdAndUserId, {}, lastUserApiHostname);\r",
											"//         pm.collectionVariables.set(\"hmacAuthHeader\", mainHmacAuthHeader);\r",
											"//     } else {\r",
											"//         console.error(\"No users found in the last account data or lastAccountData.users is not an array.\");\r",
											"//     }\r",
											"// } else {\r",
											"//     console.error(\"lastAccountKeyString is undefined or not found in bypassUserList.\");\r",
											"// }\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// function clearGlobalVariables() {",
											"//     var variablesToClear = [\"user_id\", \"account_id\", \"timestampHeader\", \"hmacAuthHeader\", \"hmacAuthHeader2\", \"bypassUserList\", \"duoChildAccounts\"];",
											"//     variablesToClear.forEach(function(variableName) {",
											"//         pm.globals.unset(variableName);",
											"//     });",
											"//     // console.log(\"Global variables cleared.\");",
											"// }",
											"",
											"// // Call the function to clear the variables",
											"// clearGlobalVariables();",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Date",
										"value": "{{timestampHeader}}"
									},
									{
										"key": "Authorization",
										"value": "{{hmacAuthHeader}}"
									}
								],
								"url": {
									"raw": "{{duo_url}}",
									"host": [
										"{{duo_url}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
							},
							"response": []
						}
					],
					"description": "### Task 3: Bypass Users\n\nVery often, users of Duo forget their mobile devices, and Duo administrators are tasked with helping these users gain access to Duo-protected resources. As an MSP, managing this can become complex, especially when keeping track of users set to bypass. Users in bypass status for extended periods can introduce security risks. Therefore, it's important for MSPs to identify which users across accounts have been set to bypass.\n\n##### Step 1: Get Users in Bypass Status\n\n1. Navigate to the Get Users in ‘Bypass’ status request and run (Send) the request to get a full list of users in Bypass status across Duo child accounts.\n    \n\n##### Step 2: Set Users in Bypass Status to Active Status\n\n1. Important: DO NOT RUN the Set ‘Bypass’ Users to ‘Active’ Status request during this lab exercise. If everyone runs this request, only the first attendee will see results, while others will see a message indicating there are no users in bypass.\n    \n\nHowever, understand the potential of this request:\n\n- These requests are configured to loop over each account, identify users in Bypass status, and subsequently set them to Active status.\n    \n- Note that running this request in a real-world scenario would efficiently manage users in bypass status across multiple accounts.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// //Generate the authorization header",
									"// function getAuthHeader(httpMethod, requestUrl, requestBody) {",
									"//     var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); //Auth or Admin API IKEY",
									"//     var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); //Auth or Admin API SKEY",
									"//     var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\"); //Auth or Admin API Hostname",
									"//     var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type",
									"",
									"//     // Check if the API hostname is defined. If not, throw an error.",
									"//     if (!API_HOSTNAME) {",
									"//         throw new Error(\"API_HOSTNAME is not defined\");",
									"//     }",
									"     ",
									"//     //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call",
									"//     if (requestUrl.indexOf(\"?\") == -1) {",
									"//         requestUrl += \"?\";",
									"//     }",
									"",
									"//     // Get the index of the start of the query parameters in the URL ",
									"//     var paramsStart = requestUrl.indexOf(\"?\");",
									"",
									"//     // Calculate the length of the hostname",
									"//     var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
									"",
									"//     // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters",
									"//     var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call",
									"     ",
									"//     // Clean up api_call by removing any unwanted characters",
									"//     api_call = api_call.replace(\"}}\", \"\");",
									"//     // console.log('api_call:', api_call);",
									"",
									"//     var params_unsorted = \"\";",
									"//     var params_array = [];",
									"//     //Create unsorted array of parameters from either URL or Body",
									"//     //Assuming POST parameters are in the Body, GET paramters are in URL",
									"//     //(technically it looks like POST can be in the URL as well)",
									"",
									"//     // Depending on the HTTP method and the existence of a request body,",
									"//     // extract the query parameters from the URL or the body into params_array",
									"//     if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
									"//         for (var parameter1 in requestBody) {",
									"//             params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
									"//             params_array.push(params_unsorted);",
									"//         }",
									"//     } else {",
									"//         params_unsorted = requestUrl.substring(paramsStart+1);",
									"//         params_array = params_unsorted.split(\"&\");",
									"//     }",
									"     ",
									"//     params_array.sort();                    //lexicographically sort parameters by key",
									"//     var encoded_params = \"\";               ",
									"//     if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from",
									"//         var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array",
									"//         encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &",
									"//     }",
									"     ",
									"//     // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use",
									"//     var moment = require('moment');",
									"//     var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"//     pm.globals.set(\"timestampHeader\",timestamp);",
									" ",
									"//     // Construct the canonical string that is to be signed, by concatenating several request elements with newlines",
									"//     var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
									"//     // console.log(requestData);",
									" ",
									"//     // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key",
									"//     var CryptoJS = require('crypto-js');",
									"//     var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"     ",
									"//     //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
									"//     var prebase = IKEY+\":\"+ hmacDigest;",
									"//     // console.log(\"prebase:\", prebase)",
									"     ",
									"//     //encodes a string in base-64",
									"//     var btoa = require('btoa');",
									"//     var baseComplete = btoa(prebase);",
									"",
									"//     var authHeader = \"Basic \"+ baseComplete;",
									"//     return authHeader;",
									"// }",
									"",
									"// // URL encode parameters",
									"// function urlEncodeParams(value, index, array) {",
									"//     return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"// }",
									"",
									"// // Get Accounts - Performing this request to pull the list of child accounts",
									"//     var url1 = `https://${pm.globals.get(\"accounts_api_host\")}/accounts/v1/account/list`;",
									"",
									"//     pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"POST\", url1, {}));",
									"",
									"//     pm.sendRequest({",
									"//     url: url1,",
									"//     method: \"POST\",",
									"//     header: {",
									"//         \"Content-Type\": \"application/x-www-form-urlencoded\",",
									"//         \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"//         \"Date\": pm.globals.get(\"timestampHeader\")",
									"//     },",
									"//     body: {}",
									"//     }, function(err, res) {",
									"//     if (err) {",
									"//         console.log(\"Error:\", err);",
									"//         return;",
									"//     }",
									"",
									"//     try {",
									"//         var responseJson = JSON.parse(res.text());",
									"//         if (responseJson.stat === \"OK\") {",
									"//             // Initialize an object to store the mapping",
									"//             var duoChildAccounts = {};",
									"",
									"//             for (var i = 0; i < responseJson.response.length; i++) {",
									"//                 var accountId = responseJson.response[i].account_id;",
									"//                 var accountName = responseJson.response[i].name;",
									"//                 var apiHostname = responseJson.response[i].api_hostname;",
									"",
									"//                 // Store the account ID, name, and API hostname mapping in duoChildAccounts",
									"//                 duoChildAccounts[accountId] = {",
									"//                     name: accountName,",
									"//                     apiHostname: apiHostname",
									"//                 };",
									"//             }",
									"",
									"//             // Save the mapping object as a global variable",
									"//             pm.globals.set(\"duoChildAccounts\", JSON.stringify(duoChildAccounts));",
									"//         } else {",
									"//             console.log(\"Unexpected 'stat' value:\", responseJson.stat);",
									"//         }",
									"//     } catch (error) {",
									"//         console.log(\"Error parsing JSON:\", error);",
									"//     }",
									"// });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Policy Management",
					"item": [
						{
							"name": "Update Global Policy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// HMAC 1",
											"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
											"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); //Auth or Admin API IKEY",
											"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); //Auth or Admin API SKEY",
											"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\"); //Auth or Admin API Hostname",
											"    var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type",
											"",
											"    // Check if the API hostname is defined. If not, throw an error.",
											"    if (!API_HOSTNAME) {",
											"        throw new Error(\"API_HOSTNAME is not defined\");",
											"    }",
											"     ",
											"    //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call",
											"    if (requestUrl.indexOf(\"?\") == -1) {",
											"        requestUrl += \"?\";",
											"    }",
											"",
											"    // Get the index of the start of the query parameters in the URL ",
											"    var paramsStart = requestUrl.indexOf(\"?\");",
											"",
											"    // Calculate the length of the hostname",
											"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
											"",
											"    // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call",
											"     ",
											"    // Clean up api_call by removing any unwanted characters",
											"    api_call = api_call.replace(\"}}\", \"\");",
											"    // console.log('api_call:', api_call);",
											"",
											"    var params_unsorted = \"\";",
											"    var params_array = [];",
											"    //Create unsorted array of parameters from either URL or Body",
											"    //Assuming POST parameters are in the Body, GET paramters are in URL",
											"    //(technically it looks like POST can be in the URL as well)",
											"",
											"    // Depending on the HTTP method and the existence of a request body,",
											"    // extract the query parameters from the URL or the body into params_array",
											"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
											"        for (var parameter1 in requestBody) {",
											"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
											"            params_array.push(params_unsorted);",
											"        }",
											"    } else {",
											"        params_unsorted = requestUrl.substring(paramsStart+1);",
											"        params_array = params_unsorted.split(\"&\");",
											"    }",
											"     ",
											"    params_array.sort();                    //lexicographically sort parameters by key",
											"    var encoded_params = \"\";               ",
											"    if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from",
											"        var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array",
											"        encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &",
											"    }",
											"     ",
											"    // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use",
											"    var moment = require('moment');",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
											"    pm.globals.set(\"timestampHeader\",timestamp);",
											" ",
											"    // Construct the canonical string that is to be signed, by concatenating several request elements with newlines",
											"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
											"    // console.log(requestData);",
											" ",
											"    // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key",
											"    var CryptoJS = require('crypto-js');",
											"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
											"     ",
											"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
											"    var prebase = IKEY+\":\"+ hmacDigest;",
											"    // console.log(\"prebase:\", prebase)",
											"     ",
											"    //encodes a string in base-64",
											"    var btoa = require('btoa');",
											"    var baseComplete = btoa(prebase);",
											"",
											"    var authHeader = \"Basic \"+ baseComplete;",
											"    return authHeader;",
											"}",
											"",
											"// HMAC 2",
											"function getAuthHeader2(httpMethod, requestUrl, requestBody, apiHostname) {",
											"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); // Accounts API IKEY",
											"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); // Accounts API SKEY",
											"",
											"    if (requestUrl.indexOf(\"?\") === -1) {",
											"        requestUrl += \"?\";",
											"    }",
											"",
											"    var paramsStart = requestUrl.indexOf(\"?\");",
											"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
											"",
											"    var params_unsorted = \"\";",
											"    var params_array = [];",
											"",
											"    // Check if requestBody is not empty",
											"    if (Object.keys(requestBody).length !== 0) {",
											"        var jsonDataString = JSON.stringify(requestBody);",
											"        jsonDataString = replaceAllVariables(jsonDataString);",
											"        requestBody = JSON.parse(jsonDataString);",
											"        for (var parameter in requestBody) {",
											"            params_unsorted = parameter + \"=\" + requestBody[parameter];",
											"            params_array.push(params_unsorted);",
											"        }",
											"    } else {",
											"        params_unsorted = requestUrl.substring(paramsStart + 1);",
											"        params_array = params_unsorted.split(\"&\");",
											"    }",
											"",
											"    params_array.sort();",
											"    var encoded_params = \"\";",
											"    if (params_array[0] !== \"\") {",
											"        var encoded_params_array = params_array.map(urlEncodeParams);",
											"        encoded_params = encoded_params_array.join(\"&\");",
											"    }",
											"",
											"    var moment = require('moment');",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
											"    pm.globals.set(\"timestampHeader\", timestamp);",
											"",
											"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;",
											"    if (Object.keys(requestBody).length !== 0) {",
											"        requestData += \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");",
											"    } else {",
											"        requestData += \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");",
											"    }",
											"",
											"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
											"",
											"    var prebase = IKEY + \":\" + hmacDigest;",
											"    var baseComplete = btoa(prebase);",
											"    var authHeader = \"Basic \" + baseComplete;",
											"    return authHeader;",
											"}",
											"",
											"// HMAC 3",
											"function getAuthHeader3(httpMethod, requestUrl, requestBody, apiHostname) {",
											"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\");",
											"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\");",
											"",
											"    if (requestUrl.indexOf(\"?\") === -1) {",
											"        requestUrl += \"?\";",
											"    }",
											"",
											"    var paramsStart = requestUrl.indexOf(\"?\");",
											"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
											"",
											"    var params_unsorted = requestUrl.substring(paramsStart + 1);",
											"    var params_array = params_unsorted.split(\"&\");",
											"    params_array.sort();",
											"    var encoded_params = params_array.map(urlEncodeParams).join(\"&\");",
											"",
											"    var moment = require('moment');",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
											"    pm.globals.set(\"timestampHeader\", timestamp);",
											"",
											"    var CryptoJS = require('crypto-js');",
											"",
											"    var jsonDataString = JSON.stringify(requestBody);",
											"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");",
											"    //console.log(\"Request Data for HMAC:\", requestData);",
											"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
											"",
											"    var prebase = IKEY + \":\" + hmacDigest;",
											"    var btoa = require('btoa');",
											"    var baseComplete = btoa(prebase);",
											"    var authHeader = \"Basic \" + baseComplete;",
											"    return authHeader;",
											"}",
											"",
											"function urlEncodeParams(value, index, array) {",
											"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
											"}",
											"",
											"function replaceAllVariables(str) {",
											"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;",
											"    return str.replace(variableRegex, function(match, variableName) {",
											"        return pm.variables.get(variableName);",
											"    });",
											"}",
											"",
											"// Request 1 - Get Accounts",
											"var url1 = `https://${pm.collectionVariables.get(\"accounts_api_host\")}/accounts/v1/account/list`;",
											"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"POST\", url1, {}));",
											"",
											"    pm.sendRequest({",
											"    url: url1,",
											"    method: \"POST\",",
											"    header: {",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\",",
											"        \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
											"        \"Date\": pm.globals.get(\"timestampHeader\")",
											"    },",
											"    body: {}",
											"    }, function(err, res) {",
											"    if (err) {",
											"        console.log(\"Error:\", err);",
											"        return;",
											"    }",
											"",
											"    try {",
											"        var responseJson = JSON.parse(res.text());",
											"        if (responseJson.stat === \"OK\") {",
											"            var duoChildAccounts = {};",
											"            responseJson.response.forEach(function(account) {",
											"                duoChildAccounts[account.account_id] = {",
											"                    name: account.name,",
											"                    apiHostname: account.api_hostname",
											"                };",
											"            });",
											"",
											"            pm.collectionVariables.set(\"duoChildAccounts\", JSON.stringify(duoChildAccounts));",
											"",
											"            // Now that duoChildAccounts is set, start processing each account",
											"            var keys = Object.keys(duoChildAccounts);",
											"            processAccount(keys, 0, duoChildAccounts);",
											"        } else {",
											"            console.log(\"Unexpected 'stat' value:\", responseJson.stat);",
											"        }",
											"    } catch (error) {",
											"        console.log(\"Error parsing JSON:\", error);",
											"    }",
											"});",
											"",
											"//Request 2 — Get Global Policy Keys",
											"function processAccount(keys, index, DuoChildAccounts) {",
											"    if (index >= keys.length) {",
											" //       console.log(\"All accounts have been processed in processAccount.\");",
											"        ",
											"        // Remove the specified variables",
											"        pm.globals.unset(\"timestampHeader\");",
											"        pm.globals.unset(\"hmacAuthHeader\");",
											"        pm.globals.unset(\"next_offset\");",
											"",
											"        // Call processAccount2 to continue processing",
											"        let duoChildAccounts = JSON.parse(pm.collectionVariables.get(\"duoChildAccounts\") || \"{}\");",
											"        let childKeys = Object.keys(duoChildAccounts);",
											"        processAccount2(childKeys, 0);",
											"        return;",
											"    }",
											"",
											"    let accountId = keys[index];",
											"    if (accountId && accountId.trim() !== \"\" && DuoChildAccounts[accountId]) {",
											"        var accountDetails = DuoChildAccounts[accountId];",
											"        var accountName = accountDetails.name;",
											"        var apiHostname = accountDetails.apiHostname;",
											"",
											"        var urlWithAccountId = `https://${apiHostname}/admin/v2/policies?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;",
											"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader2(\"GET\", urlWithAccountId, {}, apiHostname));",
											"",
											"        pm.sendRequest({",
											"            url: urlWithAccountId,",
											"            method: \"GET\",",
											"            header: {",
											"                \"Content-Type\": \"application/x-www-form-urlencoded\",",
											"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
											"                \"Date\": pm.globals.get(\"timestampHeader\")",
											"            },",
											"            body: {}",
											"        }, function(err, res) {",
											"            if (err) {",
											"                console.error('Error for account:', accountName, '; Error:', err);",
											"                processAccount(keys, index + 1, DuoChildAccounts); // Move to the next account in case of an error",
											"                return;",
											"            }",
											"",
											"            if (res.code === 200) {",
											"                var resJson = res.json();",
											"                var policies = resJson.response || [];",
											"",
											"                var globalPolicy = policies.find(policy => policy.is_global_policy);",
											"                if (globalPolicy) {",
											"                    DuoChildAccounts[accountId].globalPolicyKey = globalPolicy.policy_key;",
											"                    pm.collectionVariables.set(\"duoChildAccounts\", JSON.stringify(DuoChildAccounts));",
											"                }",
											"",
											"                if (resJson.metadata && resJson.metadata.next_offset) {",
											"                    pm.globals.set('next_offset', resJson.metadata.next_offset);",
											"                    processAccount(keys, index, DuoChildAccounts); // Continue with the same account",
											"                } else {",
											"                    pm.globals.set('next_offset', 0);",
											"                    processAccount(keys, index + 1, DuoChildAccounts); // Move to the next account",
											"                }",
											"            } else {",
											"                console.error('Request failed for account:', accountName, '; Response:', res);",
											"                processAccount(keys, index + 1, DuoChildAccounts); // Move to the next account in case of a failed request",
											"            }",
											"        });",
											"    } else {",
											"        console.error('Invalid or missing account details for accountId:', accountId);",
											"        processAccount(keys, index + 1, DuoChildAccounts); // Move to the next account if current is invalid",
											"    }",
											"}",
											"",
											"// Request 3 — Update Global Policy",
											"function processAccount2(keys, index, updatedAccounts = []) {",
											"    if (index >= keys.length) {",
											"        if (updatedAccounts.length > 0) {",
											"            console.log(`Global policy updated for accounts: ${updatedAccounts.join(\", \")}`);",
											"        } else {",
											"            console.log(\"No accounts were updated.\");",
											"        }",
											"",
											"        // Unset global variables after processing all accounts",
											"        pm.globals.unset(\"newChildAccount\");",
											"        pm.globals.unset(\"timestampHeader\");",
											"        pm.globals.unset(\"hmacAuthHeader\");",
											"",
											"        return;",
											"    }",
											"",
											"    let accountId = keys[index];",
											"    var DuoChildAccounts = JSON.parse(pm.collectionVariables.get(\"duoChildAccounts\") || \"{}\");",
											"",
											"    if (!accountId || !DuoChildAccounts[accountId]) {",
											"        console.error('Invalid account ID:', accountId);",
											"        processAccount2(keys, index + 1, updatedAccounts);",
											"        return;",
											"    }",
											"",
											"    var accountDetails = DuoChildAccounts[accountId];",
											"    var accountName = accountDetails.name;",
											"    var apiHostname = accountDetails.apiHostname;",
											"    var globalPolicyKey = accountDetails.globalPolicyKey;",
											"",
											"    if (!globalPolicyKey) {",
											"        console.error('Global policy key not found for account:', accountName);",
											"        processAccount2(keys, index + 1, updatedAccounts);",
											"        return;",
											"    }",
											"",
											"    var urlWithAccountId = `https://${apiHostname}/admin/v2/policies/${globalPolicyKey}?account_id=${accountId}`;",
											"",
											"    var requestBody = {",
											"        \"is_global_policy\": true,",
											"        \"sections\": {",
											"            \"authentication_methods\": {",
											"                \"allowed_auth_list\": [\"duo-passcode\", \"duo-push\", \"hardware-token\", \"webauthn-platform\", \"webauthn-roaming\"],",
											"                \"blocked_auth_list\": [],",
											"                \"require_verified_push\": true,",
											"                \"verified_push_digits\": 6",
											"            }",
											"        }",
											"    };",
											"",
											"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader3(\"PUT\", urlWithAccountId, requestBody, apiHostname));",
											"",
											"    pm.sendRequest({",
											"        url: urlWithAccountId,",
											"        method: \"PUT\",",
											"        header: {",
											"            \"Content-Type\": \"application/json\",",
											"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
											"            \"Date\": pm.globals.get(\"timestampHeader\")",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify(requestBody)",
											"        }",
											"    }, function (err, res) {",
											"        if (res && res.code === 200) {",
											"            updatedAccounts.push(accountName);  // Add to list instead of logging per account",
											"        } else {",
											"            console.error(`❌ Request failed for account: ${accountName}; Error:`, err, '; Response:', res);",
											"        }",
											"",
											"        processAccount2(keys, index + 1, updatedAccounts);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{timestampHeader}}"
									},
									{
										"key": "Authorization",
										"value": "{{hmacAuthHeader}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"is_global_policy\": true,\n            \"sections\": {\n                \"authentication_methods\": {\n                    \"allowed_auth_list\": [\n                        \"duo-passcode\",\n                        \"duo-push\",\n                        \"hardware-token\",\n                        \"webauthn-platform\",\n                        \"webauthn-roaming\"\n                    ],\n                    \"blocked_auth_list\": [],\n                    \"require_verified_push\": \n                    \"verified_push_digits\": \n                }\n         }\n}"
								},
								"url": {
									"raw": "{{duo_url}}",
									"host": [
										"{{duo_url}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# Task 5: Enforce Security Policies Across Accounts\n\nA key aspect of Duo's security lies in its policy enforcement. As an IT administrator, there are times when you must apply specific policy settings across all child accounts to ensure uniformity and maintain a strong security posture. Following a recent security advisory, we have been instructed to disable SMS and phone call authentication as authentication factors across all child accounts and enforce Duo Verified Push for enhanced security. In this task, you'll enforce verified push authentication with an 8-digit verification code across all Duo client accounts to ensure consistent security.\n\n## **1\\. Enforce Security Policies**\n\n**Navigate to the** **Duo Admin API** collection >> **Policy Management** >> **Update Global**\n\n1. Go to the **Body** tab and configure the following policy settings:\n    \n    - **require_verified_push**: `True`\n        \n    - **verified_push_digits**: `8`\n        \n2. Save the changes.\n    \n3. Click the **Send** button to execute the API call and apply the new policy settings across all child accounts.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Cost Report",
					"item": [
						{
							"name": "Cost Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));",
											"",
											"    var totalUsersByEdition = {};",
											"",
											"    for (let accountId in DuoChildAccounts) {",
											"        if (DuoChildAccounts.hasOwnProperty(accountId)) {",
											"            let accountDetails = DuoChildAccounts[accountId];",
											"            let edition = accountDetails.edition;",
											"            let userCount = parseInt(accountDetails.userCount, 10);",
											"",
											"            if (totalUsersByEdition.hasOwnProperty(edition)) {",
											"                totalUsersByEdition[edition] += userCount;",
											"            } else {",
											"                totalUsersByEdition[edition] = userCount;",
											"            }",
											"        }",
											"    }",
											"",
											"    var parentAccountEdition = pm.collectionVariables.get(\"parent_account_edition\");",
											"    var parentAccountUserCount = parseInt(pm.globals.get(\"parent_account_user_count\"), 10);",
											"",
											"    var parentEditionKey = \"\";",
											"    switch (parentAccountEdition) {",
											"        case \"Duo Essentials\":",
											"            parentEditionKey = \"ENTERPRISE\";",
											"            break;",
											"        case \"Duo Advantage\":",
											"            parentEditionKey = \"PLATFORM\";",
											"            break;",
											"        case \"Duo Premier\":",
											"            parentEditionKey = \"BEYOND\";",
											"            break;",
											"        default:",
											"            throw new Error(`Parent account edition is set to (${parentAccountEdition}). Please update the parent_account_edition collection variable.`);",
											"    }",
											"",
											"    if (totalUsersByEdition.hasOwnProperty(parentEditionKey)) {",
											"        totalUsersByEdition[parentEditionKey] += parentAccountUserCount;",
											"    } else {",
											"        totalUsersByEdition[parentEditionKey] = parentAccountUserCount;",
											"    }",
											"",
											"    var basePrices = {",
											"        \"ENTERPRISE\": 3,",
											"        \"PLATFORM\": 6,",
											"        \"BEYOND\": 9",
											"    };",
											"",
											"    var editionNames = {",
											"        \"ENTERPRISE\": \"Duo Essentials\",",
											"        \"PLATFORM\": \"Duo Advantage\",",
											"        \"BEYOND\": \"Duo Premier\"",
											"    };",
											"",
											"    console.log(`Duo MSP Team (Parent) Account Summary - ${new Date().toLocaleString('default', { month: 'long' })} ${new Date().getFullYear()}`);",
											"",
											"    console.log(\"Edition\".padEnd(20) + \"Users\".padEnd(10) + \"Base Price\".padEnd(15) + \"Discount Tier\".padEnd(15) + \"Unit Price\".padEnd(15) + \"Total Cost\");",
											"    console.log(\"-\".repeat(85));",
											"",
											"    var totalUserCount = 0;",
											"    var totalCost = 0;",
											"",
											"    var sortedEditions = Object.keys(totalUsersByEdition).sort((a, b) => {",
											"        if (a === \"ENTERPRISE\") return -1;",
											"        if (a === \"PLATFORM\" && b !== \"ENTERPRISE\") return -1;",
											"        return 1;",
											"    });",
											"",
											"    sortedEditions.forEach(edition => {",
											"        let userCount = totalUsersByEdition[edition];",
											"        let basePrice = basePrices[edition] || 0;",
											"        let discountTier = getDiscountTier(userCount);",
											"        let unitPrice = getUnitPrice(basePrice, discountTier);",
											"        let totalEditionCost = userCount * unitPrice;",
											"        totalUserCount += userCount;",
											"        totalCost += totalEditionCost;",
											"",
											"        let editionName = editionNames[edition];",
											"        console.log(",
											"            editionName.padEnd(20) + ",
											"            userCount.toString().padEnd(10) + ",
											"            `$${basePrice.toFixed(2)}`.padEnd(15) + ",
											"            discountTier.padEnd(15) + ",
											"            `$${unitPrice.toFixed(2)}`.padEnd(15) + ",
											"            `$${totalEditionCost.toFixed(2)}`",
											"        );",
											"    });",
											"",
											"    console.log(\"-\".repeat(85));",
											"    console.log(\"Note: Parent Account users have been included in these calculations minus the NFR adjustment.\");",
											"    console.log(`Total Users: ${totalUserCount}`);",
											"    console.log(`Total Cost: **$${totalCost.toFixed(2)}**`);",
											"",
											"    function getDiscountTier(userCount) {",
											"        var discountTier = pm.collectionVariables.get(\"discount_tier\");",
											"        if (discountTier) {",
											"            return discountTier + \"%\";",
											"        }",
											"",
											"        if (userCount >= 1 && userCount <= 999) {",
											"            return \"10%\";",
											"        } else if (userCount >= 1000 && userCount <= 4999) {",
											"            return \"20%\";",
											"        } else if (userCount >= 5000 && userCount <= 24999) {",
											"            return \"30%\";",
											"        } else if (userCount >= 25000 && userCount <= 124999) {",
											"            return \"40%\";",
											"        } else if (userCount >= 125000) {",
											"            return \"50%\";",
											"        } else {",
											"            return \"0%\";",
											"        }",
											"    }",
											"",
											"    function getUnitPrice(basePrice, discountTier) {",
											"        let discountPercentage = parseFloat(discountTier) / 100;",
											"        return basePrice - (basePrice * discountPercentage);",
											"    }",
											"",
											"    var csvContent = \"Please find a CSV breakdown of each customer's account summary below. You can copy the CSV content into the spreadsheet program of your choice (such as Microsoft Excel or Google Sheets) for easier viewing and analysis.\\n\\nAccount Name, Edition, Base Price, User Count, Cost\\n\";",
											"",
											"    for (let accountId in DuoChildAccounts) {",
											"        if (DuoChildAccounts.hasOwnProperty(accountId)) {",
											"            let accountDetails = DuoChildAccounts[accountId];",
											"            let accountName = accountDetails.name;",
											"            let edition = editionNames[accountDetails.edition];",
											"            let userCount = parseInt(accountDetails.userCount, 10);",
											"            let basePrice = basePrices[accountDetails.edition] || 0;",
											"            let cost = basePrice * userCount;",
											"            let csvLine = `${accountName},${edition},$${basePrice},${userCount},$${cost}\\n`;",
											"            csvContent += csvLine;",
											"        }",
											"    }",
											"",
											"    ",
											"    console.log(csvContent);",
											"",
											"    pm.globals.unset(\"duoChildAccounts\");",
											"",
											"} catch (error) {",
											"    console.log(\"Error:\", error);",
											"}",
											"",
											"// Deleting the variables",
											"var variablesToDelete = [",
											"    \"timestampHeader\",",
											"    \"hmacAuthHeader\",",
											"    \"hmacAuthHeader2\",",
											"    \"hmacAuthHeader3\",",
											"    \"parent_account_name\",",
											"    \"parent_account_user_count\",",
											"    \"next_offset\"",
											"];",
											"",
											"variablesToDelete.forEach(function(variableName) {",
											"    pm.globals.unset(variableName);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Initialize DuoChildAccounts as an empty object",
											"var DuoChildAccounts = {};",
											"",
											"// HMAC 1 - Get HMAC authentication header",
											"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
											"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); //Auth or Admin API IKEY",
											"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); //Auth or Admin API SKEY",
											"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\"); //Auth or Admin API Hostname",
											"    var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type",
											"",
											"    // Check if the API hostname is defined. If not, throw an error.",
											"    if (!API_HOSTNAME) {",
											"        throw new Error(\"API_HOSTNAME is not defined\");",
											"    }",
											"     ",
											"    //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call",
											"    if (requestUrl.indexOf(\"?\") == -1) {",
											"        requestUrl += \"?\";",
											"    }",
											"",
											"    // Get the index of the start of the query parameters in the URL ",
											"    var paramsStart = requestUrl.indexOf(\"?\");",
											"",
											"    // Calculate the length of the hostname",
											"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
											"",
											"    // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call",
											"     ",
											"    // Clean up api_call by removing any unwanted characters",
											"    api_call = api_call.replace(\"}}\", \"\");",
											"    // console.log('api_call:', api_call);",
											"",
											"    var params_unsorted = \"\";",
											"    var params_array = [];",
											"    //Create unsorted array of parameters from either URL or Body",
											"    //Assuming POST parameters are in the Body, GET paramters are in URL",
											"    //(technically it looks like POST can be in the URL as well)",
											"",
											"    // Depending on the HTTP method and the existence of a request body,",
											"    // extract the query parameters from the URL or the body into params_array",
											"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
											"        for (var parameter1 in requestBody) {",
											"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
											"            params_array.push(params_unsorted);",
											"        }",
											"    } else {",
											"        params_unsorted = requestUrl.substring(paramsStart+1);",
											"        params_array = params_unsorted.split(\"&\");",
											"    }",
											"     ",
											"    params_array.sort();                    //lexicographically sort parameters by key",
											"    var encoded_params = \"\";               ",
											"    if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from",
											"        var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array",
											"        encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &",
											"    }",
											"     ",
											"    // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use",
											"    var moment = require('moment');",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
											"    pm.globals.set(\"timestampHeader\",timestamp);",
											" ",
											"    // Construct the canonical string that is to be signed, by concatenating several request elements with newlines",
											"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
											"    // console.log(requestData);",
											" ",
											"    // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key",
											"    var CryptoJS = require('crypto-js');",
											"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
											"     ",
											"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
											"    var prebase = IKEY+\":\"+ hmacDigest;",
											"    // console.log(\"prebase:\", prebase)",
											"     ",
											"    //encodes a string in base-64",
											"    var btoa = require('btoa');",
											"    var baseComplete = btoa(prebase);",
											"",
											"    var authHeader = \"Basic \"+ baseComplete;",
											"    return authHeader;",
											"}",
											"",
											"// HMAC 2 - Get HMAC authentication header",
											"function getAuthHeader2(httpMethod, requestUrl, requestBody) {",
											"    var IKEY = pm.collectionVariables.get(\"parent_admin_api_ikey\"); //Auth or Admin API IKEY",
											"    var SKEY = pm.collectionVariables.get(\"parent_admin_api_skey\"); //Auth or Admin API SKEY",
											"    var API_HOSTNAME = pm.collectionVariables.get(\"parent_admin_api_host\"); //Auth or Admin API Hostname",
											"    var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type",
											"",
											"    // Check if the API hostname is defined. If not, throw an error.",
											"    if (!API_HOSTNAME) {",
											"        throw new Error(\"API_HOSTNAME is not defined\");",
											"    }",
											"     ",
											"    //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call",
											"    if (requestUrl.indexOf(\"?\") == -1) {",
											"        requestUrl += \"?\";",
											"    }",
											"",
											"    // Get the index of the start of the query parameters in the URL ",
											"    var paramsStart = requestUrl.indexOf(\"?\");",
											"",
											"    // Calculate the length of the hostname",
											"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
											"",
											"    // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call",
											"     ",
											"    // Clean up api_call by removing any unwanted characters",
											"    api_call = api_call.replace(\"}}\", \"\");",
											"    // console.log('api_call:', api_call);",
											"",
											"    var params_unsorted = \"\";",
											"    var params_array = [];",
											"    //Create unsorted array of parameters from either URL or Body",
											"    //Assuming POST parameters are in the Body, GET paramters are in URL",
											"    //(technically it looks like POST can be in the URL as well)",
											"",
											"    // Depending on the HTTP method and the existence of a request body,",
											"    // extract the query parameters from the URL or the body into params_array",
											"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
											"        for (var parameter1 in requestBody) {",
											"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
											"            params_array.push(params_unsorted);",
											"        }",
											"    } else {",
											"        params_unsorted = requestUrl.substring(paramsStart+1);",
											"        params_array = params_unsorted.split(\"&\");",
											"    }",
											"     ",
											"    params_array.sort();                    //lexicographically sort parameters by key",
											"    var encoded_params = \"\";               ",
											"    if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from",
											"        var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array",
											"        encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &",
											"    }",
											"     ",
											"    // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use",
											"    var moment = require('moment');",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
											"    pm.globals.set(\"timestampHeader\",timestamp);",
											" ",
											"    // Construct the canonical string that is to be signed, by concatenating several request elements with newlines",
											"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
											"    // console.log(requestData);",
											" ",
											"    // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key",
											"    var CryptoJS = require('crypto-js');",
											"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
											"     ",
											"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
											"    var prebase = IKEY+\":\"+ hmacDigest;",
											"    // console.log(\"prebase:\", prebase)",
											"     ",
											"    //encodes a string in base-64",
											"    var btoa = require('btoa');",
											"    var baseComplete = btoa(prebase);",
											"",
											"    var authHeader = \"Basic \"+ baseComplete;",
											"    return authHeader;",
											"}",
											"",
											"// HMAC 3 - Get HMAC authentication header",
											"function getAuthHeader3(httpMethod, requestUrl, requestBody, apiHostname) {",
											"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); // Accounts API IKEY",
											"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); // Accounts API SKEY",
											"    var AUTH_TYPE = 'HMAC-SHA1';",
											"",
											"    if (requestUrl.indexOf(\"?\") == -1) {",
											"        requestUrl += \"?\";",
											"    }",
											"",
											"    var paramsStart = requestUrl.indexOf(\"?\");",
											"    var hostname_length = apiHostname.length + 8;",
											"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
											"",
											"    var params_unsorted = \"\";",
											"    var params_array = [];",
											"",
											"    if (Object.keys(requestBody).length !== 0) {",
											"        for (var parameter1 in requestBody) {",
											"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
											"            params_array.push(params_unsorted);",
											"        }",
											"    } else {",
											"        params_unsorted = requestUrl.substring(paramsStart + 1);",
											"        params_array = params_unsorted.split(\"&\");",
											"    }",
											"",
											"    params_array.sort();",
											"    var encoded_params = \"\";",
											"    if (params_array[0] !== \"\") {",
											"        var encoded_params_array = params_array.map(urlEncodeParams);",
											"        encoded_params = encoded_params_array.join(\"&\");",
											"    }",
											"",
											"    var moment = require('moment');",
											"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
											"    pm.globals.set(\"timestampHeader\", timestamp);",
											"",
											"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;",
											"    var CryptoJS = require('crypto-js');",
											"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
											"    var prebase = IKEY + \":\" + hmacDigest;",
											"    var btoa = require('btoa');",
											"    var baseComplete = btoa(prebase);",
											"    var authHeader = \"Basic \" + baseComplete;",
											"    return authHeader;",
											"}",
											"",
											"function urlEncodeParams(value, index, array) {",
											"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
											"}",
											"",
											"// Request 1 - Get Accounts",
											"function getAccounts() {",
											"    var url1 = `https://${pm.collectionVariables.get(\"accounts_api_host\")}/accounts/v1/account/list`;",
											"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"POST\", url1, {}));",
											"",
											"    pm.sendRequest({",
											"        url: url1,",
											"        method: \"POST\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
											"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
											"            \"Date\": pm.globals.get(\"timestampHeader\")",
											"        },",
											"        body: {}",
											"    }, function(err, res) {",
											"        if (err) {",
											"            console.log(\"Error:\", err);",
											"            return;",
											"        }",
											"",
											"        try {",
											"            var responseJson = JSON.parse(res.text());",
											"            if (responseJson.stat === \"OK\") {",
											"                // Populate DuoChildAccounts",
											"                responseJson.response.forEach(account => {",
											"                    DuoChildAccounts[account.account_id] = {",
											"                        name: account.name,",
											"                        apiHostname: account.api_hostname",
											"                    };",
											"                });",
											"",
											"                // Save the mapping object as a global variable",
											"                pm.globals.set(\"duoChildAccounts\", JSON.stringify(DuoChildAccounts));",
											"",
											"                // Proceed to the next request",
											"                getSettings();",
											"            } else {",
											"                console.log(\"Unexpected 'stat' value:\", responseJson.stat);",
											"            }",
											"        } catch (error) {",
											"            console.log(\"Error parsing JSON:\", error);",
											"        }",
											"    });",
											"}",
											"",
											"// Request 2 - Get Settings",
											"function getSettings() {",
											"    var url = `https://${pm.collectionVariables.get(\"parent_admin_api_host\")}/admin/v1/settings`;",
											"    pm.globals.set(\"hmacAuthHeader2\", getAuthHeader2(\"GET\", url, {}));",
											"",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: \"GET\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
											"            \"Authorization\": pm.globals.get(\"hmacAuthHeader2\"),",
											"            \"Date\": pm.globals.get(\"timestampHeader\")",
											"        },",
											"        body: {}",
											"    }, function(err, res) {",
											"        if (err) {",
											"            console.log(\"Error:\", err);",
											"            return;",
											"        }",
											"",
											"        try {",
											"            var responseJson = JSON.parse(res.text());",
											"            if (responseJson.stat === \"OK\") {",
											"                var name = responseJson.response.name;",
											"                pm.globals.set(\"parent_account_name\", name);",
											"",
											"                // Proceed to the next request",
											"                getAccountSummary();",
											"            } else {",
											"                console.log(\"Unexpected 'stat' value:\", responseJson.stat);",
											"            }",
											"        } catch (error) {",
											"            console.log(\"Error parsing JSON:\", error);",
											"        }",
											"    });",
											"}",
											"",
											"// Request 3 - Get Account Summary",
											"function getAccountSummary() {",
											"    var url = `https://${pm.collectionVariables.get(\"parent_admin_api_host\")}/admin/v1/info/summary`;",
											"    pm.globals.set(\"hmacAuthHeader2\", getAuthHeader2(\"GET\", url, {}));",
											"",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: \"GET\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
											"            \"Authorization\": pm.globals.get(\"hmacAuthHeader2\"),",
											"            \"Date\": pm.globals.get(\"timestampHeader\")",
											"        },",
											"        body: {}",
											"    }, function(err, res) {",
											"        if (err) {",
											"            console.log(\"Error:\", err);",
											"            return;",
											"        }",
											"",
											"        try {",
											"            var responseJson = JSON.parse(res.text());",
											"            var userCount = responseJson.response.user_count;",
											"            var nfr_adjustment = pm.collectionVariables.get(\"nfr_adjustment\");",
											"            var adjustmentValue = nfr_adjustment ? parseInt(nfr_adjustment, 10) : 50;",
											"            var parentAccountUserCount = (userCount >= adjustmentValue) ? userCount - adjustmentValue : 0;",
											"            pm.globals.set(\"parent_account_user_count\", parentAccountUserCount.toString());",
											"",
											"            // Proceed to the next request",
											"            processAccounts();",
											"        } catch (error) {",
											"            console.log(\"Error parsing JSON:\", error);",
											"        }",
											"    });",
											"}",
											"",
											"// Request 4 - Get Edition for each account",
											"function processAccounts() {",
											"    var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));",
											"    var keys = Object.keys(DuoChildAccounts);",
											"    processAccount(keys, 0);",
											"    }",
											"",
											"    function processAccount(keys, index) {",
											"    if (index >= keys.length) {",
											"        // All accounts have been processed",
											"        pm.globals.set(\"duoChildAccounts\", JSON.stringify(DuoChildAccounts));",
											"",
											"        // Now call getUserCounts",
											"        getUserCounts();",
											"        return;",
											"    }",
											"",
											"    let accountId = keys[index];",
											"    var accountDetails = DuoChildAccounts[accountId];",
											"    var apiHostname = accountDetails.apiHostname;",
											"",
											"    var urlWithAccountId = `https://${apiHostname}/admin/v1/billing/edition?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;",
											"    pm.globals.set(\"hmacAuthHeader3\", getAuthHeader3(\"GET\", urlWithAccountId, {}, apiHostname));",
											"",
											"    pm.sendRequest({",
											"        url: urlWithAccountId,",
											"        method: \"GET\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
											"            \"Authorization\": pm.globals.get(\"hmacAuthHeader3\"),",
											"            \"Date\": pm.globals.get(\"timestampHeader\")",
											"        },",
											"        body: {}",
											"    }, function(err, res) {",
											"        if (err) {",
											"            console.error('Request failed for account:', accountDetails.name, '; Error:', err);",
											"            processAccount(keys, index + 1); // Move to the next account in case of an error",
											"            return;",
											"        }",
											"",
											"        if (res.code === 200) {",
											"            var resJson = res.json();",
											"            var edition = resJson.response.edition;",
											"            DuoChildAccounts[accountId].edition = edition;",
											"",
											"            if (resJson.metadata && resJson.metadata.next_offset) {",
											"                pm.globals.set('next_offset', resJson.metadata.next_offset);",
											"                processAccount(keys, index); // Continue with the same account",
											"            } else {",
											"                pm.globals.set('next_offset', 0);",
											"                processAccount(keys, index + 1); // Move to the next account",
											"            }",
											"        } else {",
											"            console.error('Request failed for account:', accountDetails.name, '; Response:', res);",
											"            processAccount(keys, index + 1); // Move to the next account in case of an error",
											"        }",
											"    });",
											"}",
											"",
											"//Request 5 - Get User Count for each account",
											"function getUserCounts() {",
											"    var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));",
											"    var keys = Object.keys(DuoChildAccounts);",
											"    processUserCount(keys, 0);",
											"}",
											"",
											"function processUserCount(keys, index) {",
											"    if (index >= keys.length) {",
											"        // All accounts have been processed",
											"        pm.globals.set(\"duoChildAccounts\", JSON.stringify(DuoChildAccounts));",
											"        return;",
											"    }",
											"",
											"    let accountId = keys[index];",
											"    var accountDetails = DuoChildAccounts[accountId];",
											"    var apiHostname = accountDetails.apiHostname;",
											"",
											"    var urlWithAccountId = `https://${apiHostname}/admin/v1/info/summary?account_id=${accountId}`;",
											"    pm.globals.set(\"hmacAuthHeader3\", getAuthHeader3(\"GET\", urlWithAccountId, {}, apiHostname));",
											"",
											"    pm.sendRequest({",
											"        url: urlWithAccountId,",
											"        method: \"GET\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
											"            \"Authorization\": pm.globals.get(\"hmacAuthHeader3\"),",
											"            \"Date\": pm.globals.get(\"timestampHeader\")",
											"        },",
											"        body: {}",
											"    }, function(err, res) {",
											"        if (err) {",
											"            console.log(\"Error fetching user count for account ID:\", accountId, \"; Error:\", err);",
											"            processUserCount(keys, index + 1); // Move to the next account in case of an error",
											"            return;",
											"        }",
											"",
											"        try {",
											"            var responseData = JSON.parse(res.text());",
											"            if (responseData && responseData.stat === \"OK\") {",
											"                DuoChildAccounts[accountId].userCount = responseData.response.user_count;",
											"                processUserCount(keys, index + 1); // Move to the next account",
											"            } else {",
											"                console.log(\"Error: Response status is not OK for account ID:\", accountId);",
											"                processUserCount(keys, index + 1); // Move to the next account in case of an error",
											"            }",
											"        } catch (error) {",
											"            console.log(\"Error parsing response body as JSON:\", error);",
											"            processUserCount(keys, index + 1); // Move to the next account in case of an error",
											"        }",
											"    });",
											"}",
											"",
											"// Start the sequence",
											"getAccounts();",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Date",
										"value": "{{timestampHeader}}"
									},
									{
										"key": "Authorization",
										"value": "{{hmacAuthHeader}}"
									}
								],
								"url": {
									"raw": "{{duo_url}}",
									"host": [
										"{{duo_url}}"
									]
								},
								"description": "Returns a list of child accounts."
							},
							"response": []
						}
					],
					"description": "# Task 6: Cost Report\n\nOur organization's accounting department has requested a real-time usage report to identify the cost of Duo across all client accounts. They need details regarding the **edition count** and the number of **users per edition**. This report will help with financial analysis and cost allocation.\n\n## **1\\. Generate the Cost Report**\n\n**Navigate to the** **Duo Admin API \\[Child\\]** collection >> **Cost Report**\n\n1. Click the **Send** button to execute the API call.\n    \n2. Review the response to see a breakdown of Duo editions and user counts across accounts."
				}
			],
			"description": "This collection makes use of the [Duo Accounts API with Admin API](https://duo.com/docs/accountsapi#using-accounts-api-with-admin-api). While Duo's Admin API supports programmatic administration of Duo account objects, such as users, 2FA devices, integrations, logs, and more. You can use an Accounts API application created at the parent account level to manage and query child accounts on the same deployment with Admin API by specifying the child account's API host in the request and the child account's ID in the list of API request parameters as account_id.\n\n- Here's an example API request to retrieve users using the Admin API:\n    \n    - `GET` /admin/v1/integrations\n        \n- Here's an example API request to retrieve users from a specific Duo account using the Accounts API with the Admin API.\n    \n    - `GET` /admin/v1/users?account_id=DAJKIKMAKLQ2ZKD571XXX\n        \n\nIn this collection, we've designed a workflow that iterates over your complete list of child accounts (utilizing the `duoChildAccounts` variable) to retrieve data from the followig Duo endpoints, and more."
		},
		{
			"name": "Clean Up",
			"item": [
				{
					"name": "Clear Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let variablesToClear = [",
									"    \"newChildAccount\", \"timestampHeader\", \"hmacAuthHeader\", ",
									"    \"child_account_account_id\", \"child_account_api_hostname\", ",
									"    \"group_id_a\", \"group_name_a\", \"username\", \"email\", ",
									"    \"enrolled_users\", \"next_offset\", \"user_id\", \"not_enrolled_users\",",
									"    \"global_policy_key\", \"duoChildAccounts\", \"account_id\", \"accountName\", \"policyName\", \"name\", \"number\", \"phone_numbers\", \"bypassUserList\"",
									"];",
									"",
									"let baseVariables = [",
									"    'integration_name_', 'integration_key_', 'secret_key_', ",
									"    'policy_name_', 'policy_key_', 'group_id_', 'group_name_'",
									"];",
									"",
									"// Clear specified variables",
									"variablesToClear.forEach(variable => {",
									"    pm.collectionVariables.unset(variable); // Use pm.environment.unset(variable) if they are environment variables",
									"});",
									"",
									"// Clear variables based on base names",
									"baseVariables.forEach(baseVar => {",
									"    for (let i = 97; i <= 122; i++) { // ASCII values for 'a' to 'z'",
									"        let dynamicVar = baseVar + String.fromCharCode(i);",
									"        pm.collectionVariables.unset(dynamicVar); // Use pm.environment.unset(dynamicVar) if they are environment variables",
									"    }",
									"});",
									"",
									"console.log(\"Variables cleared. Thanks a ton for participating in this workshop. Enjoy the rest of Cico Live\");",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "### Task 6: Conclude\n\nCongratulations, you've made it to the end of this lab! You've seen firsthand how you can use Postman to interact with Duo's APIs. Thanks for participating.\n\n##### Extra Credit: Clean Up the Environment\n\nSince this is a shared lab environment, you will get extra credit if you help clean up the environment for other attendees. Please follow the steps below to clear the variables that were stored during our workshop:\n\n1. Navigate to the Clear Variables request in the Duo Admin API \\[Child\\] collection.\n    \n2. Run (Send) this requests to remove the variables stored during the workshop.\n    \n\nBy running this request, you'll ensure that the environment is clean and ready for the next group of attendees. Thanks for being a good technical Samaritan and helping maintain a smooth lab experience for everyone!",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"//Generate the authorization header",
							"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
							"    // Ensure requestUrl is a string",
							"    requestUrl = String(requestUrl);",
							"",
							"    // Retrieve Accounts API IKEY, SKEY and API Hostname",
							"    var IKEY = pm.collectionVariables.get(\"accounts_api_ikey\"); ",
							"    var SKEY = pm.collectionVariables.get(\"accounts_api_skey\"); ",
							"    var API_HOSTNAME = pm.collectionVariables.get(\"accounts_api_host\"); ",
							"",
							"    // Check if API_HOSTNAME is defined",
							"    if (!API_HOSTNAME) {",
							"        throw new Error(\"API_HOSTNAME is not defined\");",
							"    }",
							"",
							"    // Add a '?' to the end of the URL if it doesn't exist",
							"    if (requestUrl.indexOf(\"?\") === -1) {",
							"        requestUrl += \"?\";",
							"    }",
							"",
							"    // Calculate the starting point of the query parameters in the URL",
							"    var paramsStart = requestUrl.indexOf(\"?\");",
							"",
							"    // Calculate the length of the hostname",
							"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
							"",
							"    // Extract the Duo API endpoint",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
							"    api_call = api_call.replace(\"}}\", \"\");",
							"",
							"    var params_unsorted = \"\";",
							"    var params_array = [];",
							"",
							"    // Depending on the HTTP method, extract parameters from URL or body",
							"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
							"        for (var parameter1 in requestBody) {",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
							"            params_array.push(params_unsorted);",
							"        }",
							"    } else {",
							"        params_unsorted = requestUrl.substring(paramsStart+1);",
							"        params_array = params_unsorted.split(\"&\");",
							"    }",
							"",
							"    // Sort parameters lexicographically by key",
							"    params_array.sort();                    ",
							"    var encoded_params = \"\";",
							"",
							"    // If there are parameters, encode and join them",
							"    if (params_array[0] !== \"\"){",
							"        var encoded_params_array = params_array.map(urlEncodeParams);  ",
							"        encoded_params = encoded_params_array.join(\"&\");",
							"    }",
							"",
							"    // Get the current timestamp in the RFC 2822 format",
							"    var moment = require('moment');",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
							"    pm.globals.set(\"timestampHeader\",timestamp);",
							" ",
							"    // Construct the string to be signed",
							"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
							" ",
							"    // Compute the HMAC-SHA1 signature",
							"    var CryptoJS = require('crypto-js');",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
							"     ",
							"    // Construct the Auth header",
							"    var btoa = require('btoa');",
							"    var prebase = IKEY+\":\"+ hmacDigest;",
							"    var baseComplete = btoa(prebase);",
							"    var authHeader = \"Basic \"+ baseComplete;",
							"",
							"    return authHeader;",
							"}",
							"",
							"// URL encode parameters",
							"function urlEncodeParams(value, index, array) {",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
							"}",
							"",
							"// Set the authorization header",
							"pm.globals.set(\"hmacAuthHeader\", getAuthHeader(pm.request.method, pm.request.url, pm.request.body));",
							"",
							"// Add the request headers",
							"pm.request.headers.add({key: 'Date', value: \"{{timestampHeader}}\" });",
							"pm.request.headers.add({key: 'Authorization', value: \"{{hmacAuthHeader}}\" });",
							"pm.request.headers.add({key: 'Content-Type', value: 'application/x-www-form-urlencoded' });",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accounts_api_ikey",
			"value": "DICIGLL3VJF6KCWMZPME",
			"type": "string"
		},
		{
			"key": "accounts_api_skey",
			"value": "CryA92Dzfp4V6TDib90Kdz6zNrkHpjlHWWYxiXqS",
			"type": "string"
		},
		{
			"key": "accounts_api_host",
			"value": "api-07233cb3.duosecurity.com",
			"type": "string"
		},
		{
			"key": "parent_admin_api_ikey",
			"value": "DICML971GHYHB240WV7Z",
			"type": "string"
		},
		{
			"key": "parent_admin_api_skey",
			"value": "MA9FoRuwpr2hhfx984sgZGFvOq4MTRz12JezO5ZL",
			"type": "string"
		},
		{
			"key": "parent_admin_api_host",
			"value": "api-07233cb3.duosecurity.com",
			"type": "string"
		},
		{
			"key": "parent_account_edition",
			"value": "Duo Essentials",
			"type": "string"
		},
		{
			"key": "child_admin_api_ikey",
			"value": "DIFJX2I7URDYZEMQ41TV"
		},
		{
			"key": "child_admin_api_skey",
			"value": "TAXkMHrZNLjuRVRpNWMLFduJnLdCDPgJ3qA5nKTT"
		},
		{
			"key": "child_admin_api_host",
			"value": "api-21938fa5.duosecurity.com"
		},
		{
			"key": "duo_url",
			"value": "https://api.duosecurity.com/auth/v2/ping",
			"type": "string"
		},
		{
			"key": "client_account_name",
			"value": "client_account_name_goes_THERE",
			"type": "string"
		},
		{
			"key": "usersCSV",
			"value": "",
			"type": "string"
		}
	]
}